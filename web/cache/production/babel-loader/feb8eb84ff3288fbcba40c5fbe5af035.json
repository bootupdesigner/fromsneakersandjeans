{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{EventEmitter,Platform,UnavailabilityError}from'expo-modules-core';import ExpoScreenOrientation from\"./ExpoScreenOrientation\";import{Orientation,OrientationLock,WebOrientationLock,WebOrientation,SizeClassIOS}from\"./ScreenOrientation.types\";export{Orientation,OrientationLock,WebOrientationLock,WebOrientation,SizeClassIOS};var _orientationChangeEmitter=new EventEmitter(ExpoScreenOrientation);var _orientationChangeSubscribers=[];var _lastOrientationLock=OrientationLock.UNKNOWN;export function lockAsync(_x){return _lockAsync.apply(this,arguments);}function _lockAsync(){_lockAsync=_asyncToGenerator(function*(orientationLock){if(!ExpoScreenOrientation.lockAsync){throw new UnavailabilityError('ScreenOrientation','lockAsync');}var orientationLocks=Object.values(OrientationLock);if(!orientationLocks.includes(orientationLock)){throw new TypeError(\"Invalid Orientation Lock: \"+orientationLock);}if(orientationLock===OrientationLock.OTHER){return;}yield ExpoScreenOrientation.lockAsync(orientationLock);_lastOrientationLock=orientationLock;});return _lockAsync.apply(this,arguments);}export function lockPlatformAsync(_x2){return _lockPlatformAsync.apply(this,arguments);}function _lockPlatformAsync(){_lockPlatformAsync=_asyncToGenerator(function*(options){if(!ExpoScreenOrientation.lockPlatformAsync){throw new UnavailabilityError('ScreenOrientation','lockPlatformAsync');}var screenOrientationConstantAndroid=options.screenOrientationConstantAndroid,screenOrientationArrayIOS=options.screenOrientationArrayIOS,screenOrientationLockWeb=options.screenOrientationLockWeb;var platformOrientationParam;if(Platform.OS==='android'&&screenOrientationConstantAndroid){if(isNaN(screenOrientationConstantAndroid)){throw new TypeError(\"lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with \"+screenOrientationConstantAndroid);}platformOrientationParam=screenOrientationConstantAndroid;}else if(Platform.OS==='ios'&&screenOrientationArrayIOS){if(!Array.isArray(screenOrientationArrayIOS)){throw new TypeError(\"lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with \"+screenOrientationArrayIOS);}var orientations=Object.values(Orientation);for(var orientation of screenOrientationArrayIOS){if(!orientations.includes(orientation)){throw new TypeError(\"lockPlatformAsync iOS platform: \"+orientation+\" is not a valid Orientation\");}}platformOrientationParam=screenOrientationArrayIOS;}else if(Platform.OS==='web'&&screenOrientationLockWeb){var webOrientationLocks=Object.values(WebOrientationLock);if(!webOrientationLocks.includes(screenOrientationLockWeb)){throw new TypeError(\"Invalid Web Orientation Lock: \"+screenOrientationLockWeb);}platformOrientationParam=screenOrientationLockWeb;}if(!platformOrientationParam){throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');}yield ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);_lastOrientationLock=OrientationLock.OTHER;});return _lockPlatformAsync.apply(this,arguments);}export function unlockAsync(){return _unlockAsync.apply(this,arguments);}function _unlockAsync(){_unlockAsync=_asyncToGenerator(function*(){if(!ExpoScreenOrientation.lockAsync){throw new UnavailabilityError('ScreenOrientation','lockAsync');}yield ExpoScreenOrientation.lockAsync(OrientationLock.DEFAULT);});return _unlockAsync.apply(this,arguments);}export function getOrientationAsync(){return _getOrientationAsync.apply(this,arguments);}function _getOrientationAsync(){_getOrientationAsync=_asyncToGenerator(function*(){if(!ExpoScreenOrientation.getOrientationAsync){throw new UnavailabilityError('ScreenOrientation','getOrientationAsync');}return yield ExpoScreenOrientation.getOrientationAsync();});return _getOrientationAsync.apply(this,arguments);}export function getOrientationLockAsync(){return _getOrientationLockAsync.apply(this,arguments);}function _getOrientationLockAsync(){_getOrientationLockAsync=_asyncToGenerator(function*(){if(!ExpoScreenOrientation.getOrientationLockAsync){return _lastOrientationLock;}return yield ExpoScreenOrientation.getOrientationLockAsync();});return _getOrientationLockAsync.apply(this,arguments);}export function getPlatformOrientationLockAsync(){return _getPlatformOrientationLockAsync.apply(this,arguments);}function _getPlatformOrientationLockAsync(){_getPlatformOrientationLockAsync=_asyncToGenerator(function*(){var platformOrientationLock=yield ExpoScreenOrientation.getPlatformOrientationLockAsync();if(Platform.OS==='android'){return{screenOrientationConstantAndroid:platformOrientationLock};}else if(Platform.OS==='ios'){return{screenOrientationArrayIOS:platformOrientationLock};}else if(Platform.OS==='web'){return{screenOrientationLockWeb:platformOrientationLock};}else{return{};}});return _getPlatformOrientationLockAsync.apply(this,arguments);}export function supportsOrientationLockAsync(_x3){return _supportsOrientationLockAsync.apply(this,arguments);}function _supportsOrientationLockAsync(){_supportsOrientationLockAsync=_asyncToGenerator(function*(orientationLock){if(!ExpoScreenOrientation.supportsOrientationLockAsync){throw new UnavailabilityError('ScreenOrientation','supportsOrientationLockAsync');}var orientationLocks=Object.values(OrientationLock);if(!orientationLocks.includes(orientationLock)){throw new TypeError(\"Invalid Orientation Lock: \"+orientationLock);}return yield ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);});return _supportsOrientationLockAsync.apply(this,arguments);}function getEventName(){return Platform.OS==='ios'||Platform.OS==='web'?'expoDidUpdateDimensions':'didUpdateDimensions';}export function addOrientationChangeListener(listener){if(typeof listener!=='function'){throw new TypeError(\"addOrientationChangeListener cannot be called with \"+listener);}var subscription=_orientationChangeEmitter.addListener(getEventName(),function(){var _ref=_asyncToGenerator(function*(update){var orientationInfo,orientationLock;if(Platform.OS==='ios'||Platform.OS==='web'){orientationLock=update.orientationLock;orientationInfo=update.orientationInfo;}else{var orientation;var _yield$Promise$all=yield Promise.all([getOrientationLockAsync(),getOrientationAsync()]);var _yield$Promise$all2=_slicedToArray(_yield$Promise$all,2);orientationLock=_yield$Promise$all2[0];orientation=_yield$Promise$all2[1];orientationInfo={orientation:orientation};}listener({orientationInfo:orientationInfo,orientationLock:orientationLock});});return function(_x4){return _ref.apply(this,arguments);};}());_orientationChangeSubscribers.push(subscription);return subscription;}export function removeOrientationChangeListeners(){var i=_orientationChangeSubscribers.length;while(i--){var subscriber=_orientationChangeSubscribers[i];subscriber.remove();_orientationChangeSubscribers.pop();}}export function removeOrientationChangeListener(subscription){if(!subscription||!subscription.remove){throw new TypeError(\"Must pass in a valid subscription\");}subscription.remove();_orientationChangeSubscribers=_orientationChangeSubscribers.filter(function(sub){return sub!==subscription;});}","map":{"version":3,"sources":["../src/ScreenOrientation.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Platform, Subscription, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoScreenOrientation from './ExpoScreenOrientation';\nimport {\n  Orientation,\n  OrientationChangeEvent,\n  OrientationChangeListener,\n  OrientationLock,\n  PlatformOrientationInfo,\n  WebOrientationLock,\n  WebOrientation,\n  SizeClassIOS,\n  ScreenOrientationInfo,\n} from './ScreenOrientation.types';\n\nexport {\n  Orientation,\n  OrientationLock,\n  PlatformOrientationInfo,\n  OrientationChangeListener,\n  OrientationChangeEvent,\n  WebOrientationLock,\n  WebOrientation,\n  SizeClassIOS,\n  ScreenOrientationInfo,\n  Subscription,\n};\n\nconst _orientationChangeEmitter = new EventEmitter(ExpoScreenOrientation);\nlet _orientationChangeSubscribers: Subscription[] = [];\n\nlet _lastOrientationLock: OrientationLock = OrientationLock.UNKNOWN;\n\n// @needsAudit\n/**\n * Lock the screen orientation to a particular `OrientationLock`.\n * @param orientationLock The orientation lock to apply. See the [`OrientationLock`](#orientationlock)\n * enum for possible values.\n * @return Returns a promise with `void` value, which fulfils when the orientation is set.\n *\n * # Error codes\n * - `ERR_SCREEN_ORIENTATION_INVALID_ORIENTATION_LOCK` - An invalid [`OrientationLock`](#orientationlock)\n *   was passed in.\n * - `ERR_SCREEN_ORIENTATION_UNSUPPORTED_ORIENTATION_LOCK` - The platform does not support the\n *   orientation lock policy.\n * - `ERR_SCREEN_ORIENTATION_MISSING_ACTIVITY` - __Android Only.__ Could not get the current activity.\n *\n * @example\n * ```ts\n * async function changeScreenOrientation() {\n *   await ScreenOrientation.lockAsync(ScreenOrientation.OrientationLock.LANDSCAPE_LEFT);\n * }\n * ```\n */\nexport async function lockAsync(orientationLock: OrientationLock): Promise<void> {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  if (orientationLock === OrientationLock.OTHER) {\n    return;\n  }\n\n  await ExpoScreenOrientation.lockAsync(orientationLock);\n  _lastOrientationLock = orientationLock;\n}\n\n// @needsAudit @docsMissing\n/**\n * @param options The platform specific lock to apply. See the [`PlatformOrientationInfo`](#platformorientationinfo)\n * object type for the different platform formats.\n * @return Returns a promise with `void` value, resolving when the orientation is set and rejecting\n * if an invalid option or value is passed.\n *\n * # Error codes\n * - `ERR_SCREEN_ORIENTATION_INVALID_ORIENTATION_LOCK` - __iOS Only.__ An invalid [`OrientationLock`](#orientationlock)\n *   was passed in.\n * - `ERR_SCREEN_ORIENTATION_UNSUPPORTED_ORIENTATION_LOCK` - The platform does not support the\n *   orientation lock policy.\n * - `ERR_SCREEN_ORIENTATION_MISSING_ACTIVITY` - __Android Only.__ Could not get the current activity.\n *\n */\nexport async function lockPlatformAsync(options: PlatformOrientationInfo): Promise<void> {\n  if (!ExpoScreenOrientation.lockPlatformAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n  }\n\n  const { screenOrientationConstantAndroid, screenOrientationArrayIOS, screenOrientationLockWeb } =\n    options;\n  let platformOrientationParam: any;\n  if (Platform.OS === 'android' && screenOrientationConstantAndroid) {\n    if (isNaN(screenOrientationConstantAndroid)) {\n      throw new TypeError(\n        `lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with ${screenOrientationConstantAndroid}`\n      );\n    }\n    platformOrientationParam = screenOrientationConstantAndroid;\n  } else if (Platform.OS === 'ios' && screenOrientationArrayIOS) {\n    if (!Array.isArray(screenOrientationArrayIOS)) {\n      throw new TypeError(\n        `lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with ${screenOrientationArrayIOS}`\n      );\n    }\n\n    const orientations = Object.values(Orientation);\n    for (const orientation of screenOrientationArrayIOS) {\n      if (!orientations.includes(orientation)) {\n        throw new TypeError(\n          `lockPlatformAsync iOS platform: ${orientation} is not a valid Orientation`\n        );\n      }\n    }\n    platformOrientationParam = screenOrientationArrayIOS;\n  } else if (Platform.OS === 'web' && screenOrientationLockWeb) {\n    const webOrientationLocks = Object.values(WebOrientationLock);\n    if (!webOrientationLocks.includes(screenOrientationLockWeb)) {\n      throw new TypeError(`Invalid Web Orientation Lock: ${screenOrientationLockWeb}`);\n    }\n    platformOrientationParam = screenOrientationLockWeb;\n  }\n\n  if (!platformOrientationParam) {\n    throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n  }\n  await ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);\n  _lastOrientationLock = OrientationLock.OTHER;\n}\n\n// @needsAudit\n/**\n * Sets the screen orientation back to the `OrientationLock.DEFAULT` policy.\n * @return Returns a promise with `void` value, which fulfils when the orientation is set.\n *\n * # Error codes\n * - `ERR_SCREEN_ORIENTATION_MISSING_ACTIVITY` - __Android Only.__ Could not get the current activity.\n */\nexport async function unlockAsync(): Promise<void> {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n  await ExpoScreenOrientation.lockAsync(OrientationLock.DEFAULT);\n}\n\n// @needsAudit\n/**\n * Gets the current screen orientation.\n * @return Returns a promise that fulfils with an [`Orientation`](#screenorientationorientation)\n * value that reflects the current screen orientation.\n *\n * # Error codes\n * - `ERR_SCREEN_ORIENTATION_GET_ORIENTATION_LOCK` - __Android Only.__ An unknown error occurred\n *   when trying to get the system lock.\n * - `ERR_SCREEN_ORIENTATION_MISSING_ACTIVITY` - __Android Only.__ Could not get the current activity.\n */\nexport async function getOrientationAsync(): Promise<Orientation> {\n  if (!ExpoScreenOrientation.getOrientationAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n  }\n  return await ExpoScreenOrientation.getOrientationAsync();\n}\n\n// @needsAudit\n/**\n * Gets the current screen orientation lock type.\n * @return Returns a promise which fulfils with an [`OrientationLock`](#orientationlock)\n * value.\n *\n * # Error codes\n * - `ERR_SCREEN_ORIENTATION_MISSING_ACTIVITY` - __Android Only.__ Could not get the current activity.\n */\nexport async function getOrientationLockAsync(): Promise<OrientationLock> {\n  if (!ExpoScreenOrientation.getOrientationLockAsync) {\n    return _lastOrientationLock;\n  }\n  return await ExpoScreenOrientation.getOrientationLockAsync();\n}\n\n// @needsAudit\n/**\n * Gets the platform specific screen orientation lock type.\n * @return Returns a promise which fulfils with a [`PlatformOrientationInfo`](#platformorientationinfo)\n * value.\n *\n * # Error codes\n * - `ERR_SCREEN_ORIENTATION_GET_PLATFORM_ORIENTATION_LOCK`\n * - `ERR_SCREEN_ORIENTATION_MISSING_ACTIVITY` - __Android Only.__ Could not get the current activity.\n */\nexport async function getPlatformOrientationLockAsync(): Promise<PlatformOrientationInfo> {\n  const platformOrientationLock = await ExpoScreenOrientation.getPlatformOrientationLockAsync();\n  if (Platform.OS === 'android') {\n    return {\n      screenOrientationConstantAndroid: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'ios') {\n    return {\n      screenOrientationArrayIOS: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'web') {\n    return {\n      screenOrientationLockWeb: platformOrientationLock,\n    };\n  } else {\n    return {};\n  }\n}\n\n// @needsAudit @docsMissing\n/**\n * Returns whether the [`OrientationLock`](#orientationlock) policy is supported on\n * the device.\n * @param orientationLock\n * @return Returns a promise that resolves to a `boolean` value that reflects whether or not the\n * orientationLock is supported.\n */\nexport async function supportsOrientationLockAsync(\n  orientationLock: OrientationLock\n): Promise<boolean> {\n  if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  return await ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n}\n\n// Determine the event name lazily so Jest can set up mocks in advance\nfunction getEventName(): string {\n  return Platform.OS === 'ios' || Platform.OS === 'web'\n    ? 'expoDidUpdateDimensions'\n    : 'didUpdateDimensions';\n}\n\n// We rely on RN to emit `didUpdateDimensions`\n// If this method no longer works, it's possible that the underlying RN implementation has changed\n// see https://github.com/facebook/react-native/blob/c31f79fe478b882540d7fd31ee37b53ddbd60a17/ReactAndroid/src/main/java/com/facebook/react/modules/deviceinfo/DeviceInfoModule.java#L90\n// @needsAudit\n/**\n * Invokes the `listener` function when the screen orientation changes from `portrait` to `landscape`\n * or from `landscape` to `portrait`. For example, it won't be invoked when screen orientation\n * change from `portrait up` to `portrait down`, but it will be called when there was a change from\n * `portrait up` to `landscape left`.\n * @param listener Each orientation update will pass an object with the new [`OrientationChangeEvent`](#orientationchangeevent)\n * to the listener.\n */\nexport function addOrientationChangeListener(listener: OrientationChangeListener): Subscription {\n  if (typeof listener !== 'function') {\n    throw new TypeError(`addOrientationChangeListener cannot be called with ${listener}`);\n  }\n  const subscription = _orientationChangeEmitter.addListener(\n    getEventName(),\n    async (update: OrientationChangeEvent) => {\n      let orientationInfo, orientationLock;\n      if (Platform.OS === 'ios' || Platform.OS === 'web') {\n        // For iOS, RN relies on statusBarOrientation (deprecated) to emit `didUpdateDimensions`\n        // event, so we emit our own `expoDidUpdateDimensions` event instead\n        orientationLock = update.orientationLock;\n        orientationInfo = update.orientationInfo;\n      } else {\n        // We rely on the RN Dimensions to emit the `didUpdateDimensions` event on Android\n        let orientation;\n        [orientationLock, orientation] = await Promise.all([\n          getOrientationLockAsync(),\n          getOrientationAsync(),\n        ]);\n        orientationInfo = { orientation };\n      }\n      listener({ orientationInfo, orientationLock });\n    }\n  );\n  _orientationChangeSubscribers.push(subscription);\n  return subscription;\n}\n\n// We need to keep track of our own subscribers because EventEmitter uses a shared subscriber\n// from NativeEventEmitter that is registered to the same eventTypes as us. Directly calling\n// removeAllListeners(eventName) will remove other module's subscribers.\n// @needsAudit\n/**\n * Removes all listeners subscribed to orientation change updates.\n */\nexport function removeOrientationChangeListeners(): void {\n  // Remove listener by subscription instead of eventType to avoid clobbering Dimension module's subscription of didUpdateDimensions\n  let i = _orientationChangeSubscribers.length;\n  while (i--) {\n    const subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n\n    // remove after a successful unsubscribe\n    _orientationChangeSubscribers.pop();\n  }\n}\n\n// @needsAudit\n/**\n * Unsubscribes the listener associated with the `Subscription` object from all orientation change\n * updates.\n * @param subscription A subscription object that manages the updates passed to a listener function\n * on an orientation change.\n */\nexport function removeOrientationChangeListener(subscription: Subscription): void {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(`Must pass in a valid subscription`);\n  }\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(\n    (sub) => sub !== subscription\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}