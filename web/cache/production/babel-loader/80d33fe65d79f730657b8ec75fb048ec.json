{"ast":null,"code":"import Dimensions from\"react-native-web/dist/exports/Dimensions\";var overflowLeft=function overflowLeft(center){return center<0;};var overflowRight=function overflowRight(center,tooltipWidth){var _Dimensions$get=Dimensions.get('window'),layoutWidth=_Dimensions$get.width;return center+tooltipWidth>layoutWidth;};var overflowBottom=function overflowBottom(childrenY,childrenHeight,tooltipHeight){var _Dimensions$get2=Dimensions.get('window'),layoutHeight=_Dimensions$get2.height;return childrenY+childrenHeight+tooltipHeight>layoutHeight;};var getTooltipXPosition=function getTooltipXPosition(_ref,_ref2){var childrenX=_ref.pageX,childrenWidth=_ref.width;var tooltipWidth=_ref2.width;var center=childrenX+(childrenWidth-tooltipWidth)/2;if(overflowLeft(center))return childrenX;if(overflowRight(center,tooltipWidth))return childrenX+childrenWidth-tooltipWidth;return center;};var getTooltipYPosition=function getTooltipYPosition(_ref3,_ref4){var childrenY=_ref3.pageY,childrenHeight=_ref3.height;var tooltipHeight=_ref4.height;if(overflowBottom(childrenY,childrenHeight,tooltipHeight))return childrenY-tooltipHeight;return childrenY+childrenHeight;};export var getTooltipPosition=function getTooltipPosition(_ref5){var children=_ref5.children,tooltip=_ref5.tooltip,measured=_ref5.measured;if(!measured)return{};return{left:getTooltipXPosition(children,tooltip),top:getTooltipYPosition(children,tooltip)};};","map":{"version":3,"sources":["utils.ts"],"names":["overflowLeft","center","overflowRight","tooltipWidth","width","layoutWidth","Dimensions","get","overflowBottom","childrenY","childrenHeight","tooltipHeight","height","layoutHeight","getTooltipXPosition","pageX","childrenX","childrenWidth","getTooltipYPosition","pageY","getTooltipPosition","children","tooltip","measured","left","top"],"mappings":"iEAqBA,GAAMA,aAAY,CAAIC,QAAhBD,aAAY,CAAIC,MAAc,CAAc,CAChD,MAAOA,OAAM,CAAG,CAAC,CACnB,CAAC,CAMD,GAAMC,cAAa,CAAG,QAAhBA,cAAa,CAAID,MAAc,CAAEE,YAAoB,CAAc,CACvE,oBAA+BG,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAAxCF,WAAAA,iBAAPD,KAAK,CAEb,MAAOH,OAAM,CAAGE,YAAY,CAAGE,WAAW,CAC5C,CAAC,CAMD,GAAMG,eAAc,CAAG,QAAjBA,eAAc,CAClBC,SAAiB,CACjBC,cAAsB,CACtBC,aAAqB,CACT,CACZ,qBAAiCL,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAAzCM,YAAAA,kBAARD,MAAM,CAEd,MAAOH,UAAS,CAAGC,cAAc,CAAGC,aAAa,CAAGE,YAAY,CAClE,CAAC,CAED,GAAMC,oBAAmB,CAAG,QAAtBA,oBAAmB,CAAG,IAAA,CAAA,KAAA,CAGf,CAFX,GAASE,UAAS,CAA6C,IAAA,CAA7DD,KAAK,CAAoBE,aAAAA,CAAoC,IAAA,CAA3Cb,KAAK,CAAsC,GACtDD,aAAAA,CAA6B,KAAA,CAApCC,KAAK,CAEP,GAAMH,OAAM,CAAGe,SAAS,CAAG,CAACC,aAAa,CAAGd,YAAY,EAAI,CAAC,CAE7D,GAAIH,YAAY,CAACC,MAAM,CAAC,CAAE,MAAOe,UAAS,CAE1C,GAAId,aAAa,CAACD,MAAM,CAAEE,YAAY,CAAC,CACrC,MAAOa,UAAS,CAAGC,aAAa,CAAGd,YAAY,CAEjD,MAAOF,OAAM,CACf,CAAC,CAED,GAAMiB,oBAAmB,CAAG,QAAtBA,oBAAmB,CAAG,KAAA,CAAA,KAAA,CAGf,CAFX,GAAST,UAAS,CAA+C,KAAA,CAA/DU,KAAK,CAAqBT,cAAAA,CAAqC,KAAA,CAA7CE,MAAM,CAAuC,GACvDD,cAAAA,CAA8B,KAAA,CAAtCC,MAAM,CAER,GAAIJ,cAAc,CAACC,SAAS,CAAEC,cAAc,CAAEC,aAAa,CAAC,CAC1D,MAAOF,UAAS,CAAGE,aAAa,CAElC,MAAOF,UAAS,CAAGC,cAAc,CACnC,CAAC,CAED,MAAO,IAAMU,mBAAkB,CAAG,QAArBA,mBAAkB,CAAG,KAAA,CAIqB,CAJpB,GACjCC,SAAQ,CAGI,KAAA,CAHZA,QAAQ,CACRC,OAAO,CAEK,KAAA,CAFZA,OAAO,CACPC,QAAAA,CACY,KAAA,CADZA,QAAAA,CAEA,GAAI,CAACA,QAAQ,CAAE,MAAO,CAAC,CAAC,CAExB,MAAO,CACLC,IAAI,CAAEV,mBAAmB,CAACO,QAAQ,CAAEC,OAAO,CAAC,CAC5CG,GAAG,CAAEP,mBAAmB,CAACG,QAAQ,CAAEC,OAAO,CAC5C,CAAC,CACH,CAAC","sourceRoot":"../../src","sourcesContent":["import { Dimensions } from 'react-native';\n/**\n * Return true when the tooltip center x-coordinate relative to the wrapped element is negative.\n * The tooltip will be placed at the starting x-coordinate from the wrapped element.\n */\nconst overflowLeft = center => {\n  return center < 0;\n};\n\n/**\n * Return true when the tooltip center x-coordinate + tooltip width is greater than the layout width\n * The tooltip width will grow from right to left relative to the wrapped element.\n */\nconst overflowRight = (center, tooltipWidth) => {\n  const {\n    width: layoutWidth\n  } = Dimensions.get('window');\n  return center + tooltipWidth > layoutWidth;\n};\n\n/**\n * Return true when the children y-coordinate + its height + tooltip height is greater than the layout height.\n * The tooltip will be placed at the top of the wrapped element.\n */\nconst overflowBottom = (childrenY, childrenHeight, tooltipHeight) => {\n  const {\n    height: layoutHeight\n  } = Dimensions.get('window');\n  return childrenY + childrenHeight + tooltipHeight > layoutHeight;\n};\nconst getTooltipXPosition = (_ref, _ref2) => {\n  let {\n    pageX: childrenX,\n    width: childrenWidth\n  } = _ref;\n  let {\n    width: tooltipWidth\n  } = _ref2;\n  const center = childrenX + (childrenWidth - tooltipWidth) / 2;\n  if (overflowLeft(center)) return childrenX;\n  if (overflowRight(center, tooltipWidth)) return childrenX + childrenWidth - tooltipWidth;\n  return center;\n};\nconst getTooltipYPosition = (_ref3, _ref4) => {\n  let {\n    pageY: childrenY,\n    height: childrenHeight\n  } = _ref3;\n  let {\n    height: tooltipHeight\n  } = _ref4;\n  if (overflowBottom(childrenY, childrenHeight, tooltipHeight)) return childrenY - tooltipHeight;\n  return childrenY + childrenHeight;\n};\nexport const getTooltipPosition = _ref5 => {\n  let {\n    children,\n    tooltip,\n    measured\n  } = _ref5;\n  if (!measured) return {};\n  return {\n    left: getTooltipXPosition(children, tooltip),\n    top: getTooltipYPosition(children, tooltip)\n  };\n};\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}