{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{useInternalTheme}from\"../../core/theming\";import SegmentedButtonItem from\"./SegmentedButtonItem\";import{getDisabledSegmentedButtonStyle}from\"./utils\";var SegmentedButtons=function SegmentedButtons(_ref){var value=_ref.value,onValueChange=_ref.onValueChange,buttons=_ref.buttons,multiSelect=_ref.multiSelect,density=_ref.density,style=_ref.style,themeOverrides=_ref.theme;var theme=useInternalTheme(themeOverrides);return React.createElement(View,{style:[styles.row,style]},buttons.map(function(item,i){var disabledChildStyle=getDisabledSegmentedButtonStyle({theme:theme,buttons:buttons,index:i});var segment=i===0?'first':i===buttons.length-1?'last':undefined;var checked=multiSelect&&Array.isArray(value)?value.includes(item.value):value===item.value;var onPress=function onPress(e){var _item$onPress;(_item$onPress=item.onPress)===null||_item$onPress===void 0?void 0:_item$onPress.call(item,e);var nextValue=multiSelect&&Array.isArray(value)?checked?value.filter(function(val){return item.value!==val;}):[].concat(_toConsumableArray(value),[item.value]):item.value;onValueChange(nextValue);};return React.createElement(SegmentedButtonItem,_extends({},item,{key:i,checked:checked,segment:segment,density:density,onPress:onPress,style:[item.style,disabledChildStyle],theme:theme}));}));};var styles=StyleSheet.create({row:{flexDirection:'row'}});export default SegmentedButtons;export{SegmentedButtons};","map":{"version":3,"sources":["SegmentedButtons.tsx"],"names":["React","useInternalTheme","SegmentedButtonItem","getDisabledSegmentedButtonStyle","SegmentedButtons","value","onValueChange","buttons","multiSelect","density","style","theme","themeOverrides","styles","row","map","item","i","disabledChildStyle","index","segment","length","undefined","checked","Array","isArray","includes","onPress","e","nextValue","filter","val","StyleSheet","create","flexDirection"],"mappings":"oXAAA,MAAO,GAAKA,MAAK,KAAM,OAAO,CAAA,sHAW9B,OAASC,gBAAgB,0BAEzB,MAAOC,oBAAmB,6BAC1B,OAASC,+BAA+B,eAgHxC,GAAMC,iBAAgB,CAAG,QAAnBA,iBAAgB,CAAG,IAAA,CAQZ,CARa,GACxBC,MAAK,CAOC,IAAA,CAPNA,KAAK,CACLC,aAAa,CAMP,IAAA,CANNA,aAAa,CACbC,OAAO,CAKD,IAAA,CALNA,OAAO,CACPC,WAAW,CAIL,IAAA,CAJNA,WAAW,CACXC,OAAO,CAGD,IAAA,CAHNA,OAAO,CACPC,KAAK,CAEC,IAAA,CAFNA,KAAK,CACEE,cAAAA,CACD,IAAA,CADND,KAAK,CAEL,GAAMA,MAAK,CAAGV,gBAAgB,CAACW,cAAc,CAAC,CAE9C,MACE,MAAA,CAAA,aAAA,CAAC,IAAI,CAAA,CAAC,KAAK,CAAE,CAACC,MAAM,CAACC,GAAG,CAAEJ,KAAK,CAAE,CAAA,CAC9BH,OAAO,CAACQ,GAAG,CAAC,SAACC,IAAI,CAAEC,CAAC,CAAK,CACxB,GAAMC,mBAAkB,CAAGf,+BAA+B,CAAC,CACzDQ,KAAK,CAALA,KAAK,CACLJ,OAAO,CAAPA,OAAO,CACPY,KAAK,CAAEF,CACT,CAAC,CAAC,CACF,GAAMG,QAAO,CACXH,CAAC,GAAK,CAAC,CAAG,OAAO,CAAGA,CAAC,GAAKV,OAAO,CAACc,MAAM,CAAG,CAAC,CAAG,MAAM,CAAGC,SAAS,CAEnE,GAAMC,QAAO,CACXf,WAAW,EAAIgB,KAAK,CAACC,OAAO,CAACpB,KAAK,CAAC,CAC/BA,KAAK,CAACqB,QAAQ,CAACV,IAAI,CAACX,KAAK,CAAC,CAC1BA,KAAK,GAAKW,IAAI,CAACX,KAAK,CAE1B,GAAMsB,QAAO,CAAIC,QAAXD,QAAO,CAAIC,CAAwB,CAAK,CAAA,GAAA,cAAA,CAC5C,CAAA,aAAA,CAAA,IAAI,CAACD,OAAO,IAAA,IAAA,EAAA,aAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAZ,aAAA,CAAA,IAAA,CAAA,IAAI,CAAWC,CAAC,CAAC,CAEjB,GAAMC,UAAS,CACbrB,WAAW,EAAIgB,KAAK,CAACC,OAAO,CAACpB,KAAK,CAAC,CAC/BkB,OAAO,CACLlB,KAAK,CAACyB,MAAM,CAAEC,SAAAA,GAAG,QAAKf,KAAI,CAACX,KAAK,GAAK0B,GAAG,GAAC,8BACrC1B,KAAK,GAAEW,IAAI,CAACX,KAAK,EAAC,CACxBW,IAAI,CAACX,KAAK,CAGhBC,aAAa,CAACuB,SAAS,CAAC,CAC1B,CAAC,CAED,MACE,MAAA,CAAA,aAAA,CAAC,mBAAmB,CAAA,QAAA,CAAA,CAAA,CAAA,CACdb,IAAI,CAAA,CACR,GAAG,CAAEC,CAAE,CACP,OAAO,CAAEM,OAAQ,CACjB,OAAO,CAAEH,OAAQ,CACjB,OAAO,CAAEX,OAAQ,CACjB,OAAO,CAAEkB,OAAQ,CACjB,KAAK,CAAE,CAACX,IAAI,CAACN,KAAK,CAAEQ,kBAAkB,CAAE,CACxC,KAAK,CAAEP,KAAM,CAAA,CAAA,CACb,CAEN,CAAC,CAAC,CACG,CAEX,CAAC,CAED,GAAME,OAAM,CAAGmB,UAAU,CAACC,MAAM,CAAC,CAC/BnB,GAAG,CAAE,CACHoB,aAAa,CAAE,KACjB,CACF,CAAC,CAAC,CAEF,cAAe9B,iBAAgB,CAG/B,OAASA,gBAAoC","sourceRoot":"../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { useInternalTheme } from '../../core/theming';\nimport SegmentedButtonItem from './SegmentedButtonItem';\nimport { getDisabledSegmentedButtonStyle } from './utils';\n/**\n * Segmented buttons can be used to select options, switch views or sort elements.</br>\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/segmented-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { SafeAreaView, StyleSheet } from 'react-native';\n * import { SegmentedButtons } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('');\n *\n *   return (\n *     <SafeAreaView style={styles.container}>\n *       <SegmentedButtons\n *         value={value}\n *         onValueChange={setValue}\n *         buttons={[\n *           {\n *             value: 'walk',\n *             label: 'Walking',\n *           },\n *           {\n *             value: 'train',\n *             label: 'Transit',\n *           },\n *           { value: 'drive', label: 'Driving' },\n *         ]}\n *       />\n *     </SafeAreaView>\n *   );\n * };\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     alignItems: 'center',\n *   },\n * });\n *\n * export default MyComponent;\n *```\n */\nconst SegmentedButtons = _ref => {\n  let {\n    value,\n    onValueChange,\n    buttons,\n    multiSelect,\n    density,\n    style,\n    theme: themeOverrides\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  return /*#__PURE__*/React.createElement(View, {\n    style: [styles.row, style]\n  }, buttons.map((item, i) => {\n    const disabledChildStyle = getDisabledSegmentedButtonStyle({\n      theme,\n      buttons,\n      index: i\n    });\n    const segment = i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;\n    const checked = multiSelect && Array.isArray(value) ? value.includes(item.value) : value === item.value;\n    const onPress = e => {\n      var _item$onPress;\n      (_item$onPress = item.onPress) === null || _item$onPress === void 0 ? void 0 : _item$onPress.call(item, e);\n      const nextValue = multiSelect && Array.isArray(value) ? checked ? value.filter(val => item.value !== val) : [...value, item.value] : item.value;\n\n      // @ts-expect-error: TS doesn't preserve types after destructuring, so the type isn't inferred correctly\n      onValueChange(nextValue);\n    };\n    return /*#__PURE__*/React.createElement(SegmentedButtonItem, _extends({}, item, {\n      key: i,\n      checked: checked,\n      segment: segment,\n      density: density,\n      onPress: onPress,\n      style: [item.style, disabledChildStyle],\n      theme: theme\n    }));\n  }));\n};\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  }\n});\nexport default SegmentedButtons;\n\n// @component-docs ignore-next-line\nexport { SegmentedButtons };\n//# sourceMappingURL=SegmentedButtons.js.map"]},"metadata":{},"sourceType":"module"}