{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"label\",\"size\",\"style\",\"labelStyle\",\"color\",\"theme\"],_excluded2=[\"backgroundColor\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import useWindowDimensions from\"react-native-web/dist/exports/useWindowDimensions\";import View from\"react-native-web/dist/exports/View\";import{useInternalTheme}from\"../../core/theming\";import{white}from\"../../styles/themes/v2/colors\";import getContrastingColor from\"../../utils/getContrastingColor\";import Text from\"../Typography/Text\";var defaultSize=64;var AvatarText=function AvatarText(_ref){var _theme$colors;var label=_ref.label,_ref$size=_ref.size,size=_ref$size===void 0?defaultSize:_ref$size,style=_ref.style,labelStyle=_ref.labelStyle,customColor=_ref.color,themeOverrides=_ref.theme,rest=_objectWithoutProperties(_ref,_excluded);var theme=useInternalTheme(themeOverrides);var _ref2=StyleSheet.flatten(style)||{},_ref2$backgroundColor=_ref2.backgroundColor,backgroundColor=_ref2$backgroundColor===void 0?(_theme$colors=theme.colors)===null||_theme$colors===void 0?void 0:_theme$colors.primary:_ref2$backgroundColor,restStyle=_objectWithoutProperties(_ref2,_excluded2);var textColor=customColor!=null?customColor:getContrastingColor(backgroundColor,white,'rgba(0, 0, 0, .54)');var _useWindowDimensions=useWindowDimensions(),fontScale=_useWindowDimensions.fontScale;return React.createElement(View,_extends({style:[{width:size,height:size,borderRadius:size/2,backgroundColor:backgroundColor},styles.container,restStyle]},rest),React.createElement(Text,{style:[styles.text,{color:textColor,fontSize:size/2,lineHeight:size/fontScale},labelStyle],numberOfLines:1},label));};AvatarText.displayName='Avatar.Text';var styles=StyleSheet.create({container:{justifyContent:'center',alignItems:'center'},text:{textAlign:'center',textAlignVertical:'center'}});export default AvatarText;","map":{"version":3,"sources":["AvatarText.tsx"],"names":["React","useInternalTheme","white","getContrastingColor","Text","defaultSize","AvatarText","label","size","style","labelStyle","color","customColor","theme","themeOverrides","rest","backgroundColor","colors","primary","restStyle","StyleSheet","flatten","textColor","fontScale","useWindowDimensions","width","height","borderRadius","styles","container","text","fontSize","lineHeight","displayName","create","justifyContent","alignItems","textAlign","textAlignVertical"],"mappings":"meAAA,MAAO,GAAKA,MAAK,KAAM,OAAO,CAAA,yMAU9B,OAASC,gBAAgB,0BACzB,OAASC,KAAK,qCAEd,MAAOC,oBAAmB,uCAC1B,MAAOC,KAAI,0BAEX,GAAMC,YAAW,CAAG,EAAE,CAgDtB,GAAMC,WAAU,CAAG,QAAbA,WAAU,CAAG,IAAA,CAQN,CAAA,GAAA,cAAA,CARO,GAClBC,MAAK,CAOC,IAAA,CAPNA,KAAK,WAOC,IAAA,CANNC,IAAI,CAAJA,IAAI,oBAAGH,WAAW,WAClBI,KAAK,CAKC,IAAA,CALNA,KAAK,CACLC,UAAU,CAIJ,IAAA,CAJNA,UAAU,CACHE,WAAW,CAGZ,IAAA,CAHND,KAAK,CACEG,cAAc,CAEf,IAAA,CAFND,KAAK,CACFE,IAAAA,0BACG,IAAA,YACN,GAAMF,MAAK,CAAGZ,gBAAgB,CAACa,cAAc,CAAC,CAC9C,UACEM,UAAU,CAACC,OAAO,CAACZ,KAAK,CAAC,EAAI,CAAC,CAAC,6BADzBO,eAAe,CAAfA,eAAe,gCAAA,CAAA,aAAA,CAAGH,KAAK,CAACI,MAAM,IAAA,IAAA,EAAA,aAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAZJ,aAAAA,CAAcK,OAAO,uBAAKC,SAAAA,4CAEpD,GAAMG,UAAS,CACbV,WAAW,OAAXA,WAAW,CACXT,mBAAmB,CAACa,eAAe,CAAEd,KAAK,CAAE,oBAAoB,CAAC,CACnE,yBAAsBsB,mBAAmB,EAAE,CAAnCD,SAAAA,sBAAAA,SAAAA,CAER,MACE,MAAA,CAAA,aAAA,CAAC,IAAI,CAAA,QAAA,CAAA,CACH,KAAK,CAAE,CACL,CACEE,KAAK,CAAEjB,IAAI,CACXkB,MAAM,CAAElB,IAAI,CACZmB,YAAY,CAAEnB,IAAI,CAAG,CAAC,CACtBQ,eAAAA,CAAAA,eACF,CAAC,CACDY,MAAM,CAACC,SAAS,CAChBV,SAAS,CACT,CAAA,CACEJ,IAAI,CAAA,CAER,KAAA,CAAA,aAAA,CAAC,IAAI,CAAA,CACH,KAAK,CAAE,CACLa,MAAM,CAACE,IAAI,CACX,CACEnB,KAAK,CAAEW,SAAS,CAChBS,QAAQ,CAAEvB,IAAI,CAAG,CAAC,CAClBwB,UAAU,CAAExB,IAAI,CAAGe,SACrB,CAAC,CACDb,UAAU,CACV,CACF,aAAa,CAAE,CAAE,CAAA,CAEhBH,KAAK,CACD,CACF,CAEX,CAAC,CAEDD,UAAU,CAAC2B,WAAW,CAAG,aAAa,CAEtC,GAAML,OAAM,CAAGR,UAAU,CAACc,MAAM,CAAC,CAC/BL,SAAS,CAAE,CACTM,cAAc,CAAE,QAAQ,CACxBC,UAAU,CAAE,QACd,CAAC,CACDN,IAAI,CAAE,CACJO,SAAS,CAAE,QAAQ,CACnBC,iBAAiB,CAAE,QACrB,CACF,CAAC,CAAC,CAEF,cAAehC,WAAU","sourceRoot":"../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport { StyleSheet, useWindowDimensions, View } from 'react-native';\nimport { useInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport getContrastingColor from '../../utils/getContrastingColor';\nimport Text from '../Typography/Text';\nconst defaultSize = 64;\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-text.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Text size={24} label=\"XD\" />\n * );\n * ```\n */\nconst AvatarText = _ref => {\n  var _theme$colors;\n  let {\n    label,\n    size = defaultSize,\n    style,\n    labelStyle,\n    color: customColor,\n    theme: themeOverrides,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const {\n    backgroundColor = (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.primary,\n    ...restStyle\n  } = StyleSheet.flatten(style) || {};\n  const textColor = customColor ?? getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n  const {\n    fontScale\n  } = useWindowDimensions();\n  return /*#__PURE__*/React.createElement(View, _extends({\n    style: [{\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor\n    }, styles.container, restStyle]\n  }, rest), /*#__PURE__*/React.createElement(Text, {\n    style: [styles.text, {\n      color: textColor,\n      fontSize: size / 2,\n      lineHeight: size / fontScale\n    }, labelStyle],\n    numberOfLines: 1\n  }, label));\n};\nAvatarText.displayName = 'Avatar.Text';\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center'\n  }\n});\nexport default AvatarText;\n//# sourceMappingURL=AvatarText.js.map"]},"metadata":{},"sourceType":"module"}