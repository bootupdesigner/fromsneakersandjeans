{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"icon\",\"size\",\"theme\",\"accessibilityLabel\",\"disabled\",\"style\",\"value\",\"status\",\"onPress\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import color from'color';import{useInternalTheme}from\"../../core/theming\";import{black,white}from\"../../styles/themes/v2/colors\";import{forwardRef}from\"../../utils/forwardRef\";import IconButton from\"../IconButton/IconButton\";import{ToggleButtonGroupContext}from\"./ToggleButtonGroup\";import{getToggleButtonColor}from\"./utils\";var ToggleButton=forwardRef(function(_ref,ref){var icon=_ref.icon,size=_ref.size,themeOverrides=_ref.theme,accessibilityLabel=_ref.accessibilityLabel,disabled=_ref.disabled,style=_ref.style,value=_ref.value,status=_ref.status,_onPress=_ref.onPress,rest=_objectWithoutProperties(_ref,_excluded);var theme=useInternalTheme(themeOverrides);var borderRadius=theme.roundness;return React.createElement(ToggleButtonGroupContext.Consumer,null,function(context){var checked=context&&context.value===value||status==='checked';var backgroundColor=getToggleButtonColor({theme:theme,checked:checked});var borderColor=theme.isV3?theme.colors.outline:color(theme.dark?white:black).alpha(0.29).rgb().string();return React.createElement(IconButton,_extends({borderless:false,icon:icon,onPress:function onPress(e){if(_onPress){_onPress(e);}if(context){context.onValueChange(!checked?value:null);}},size:size,accessibilityLabel:accessibilityLabel,accessibilityState:{disabled:disabled,selected:checked},disabled:disabled,style:[styles.content,{backgroundColor:backgroundColor,borderRadius:borderRadius,borderColor:borderColor},style],ref:ref,theme:theme},rest));});});var styles=StyleSheet.create({content:{width:42,height:42,margin:0}});export default ToggleButton;export{ToggleButton};","map":{"version":3,"sources":["ToggleButton.tsx"],"names":["React","color","useInternalTheme","black","white","forwardRef","IconButton","ToggleButtonGroupContext","getToggleButtonColor","ToggleButton","icon","size","theme","themeOverrides","accessibilityLabel","disabled","style","value","status","onPress","rest","ref","borderRadius","roundness","context","checked","backgroundColor","borderColor","isV3","colors","outline","dark","alpha","rgb","string","e","onValueChange","selected","styles","content","StyleSheet","create","width","height","margin"],"mappings":"yeAAA,MAAO,GAAKA,MAAK,KAAM,OAAO,CAAA,iEAU9B,MAAOC,MAAK,KAAM,OAAO,CAEzB,OAASC,gBAAgB,0BACzB,OAASC,KAAK,CAAEC,KAAK,qCAErB,OAASC,UAAU,8BAEnB,MAAOC,WAAU,gCACjB,OAASC,wBAAwB,2BACjC,OAASC,oBAAoB,eAiF7B,GAAMC,aAAY,CAAGJ,UAAU,CAC7B,SAAA,IAAA,CAaEgB,GAAG,CACA,CAbH,GACEX,KAAI,CAUE,IAAA,CAVNA,IAAI,CACJC,IAAI,CASE,IAAA,CATNA,IAAI,CACGE,cAAc,CAQf,IAAA,CARND,KAAK,CACLE,kBAAkB,CAOZ,IAAA,CAPNA,kBAAkB,CAClBC,QAAQ,CAMF,IAAA,CANNA,QAAQ,CACRC,KAAK,CAKC,IAAA,CALNA,KAAK,CACLC,KAAK,CAIC,IAAA,CAJNA,KAAK,CACLC,MAAM,CAGA,IAAA,CAHNA,MAAM,CACNC,QAAO,CAED,IAAA,CAFNA,OAAO,CACJC,IAAAA,0BACG,IAAA,YAGR,GAAMR,MAAK,CAAGV,gBAAgB,CAACW,cAAc,CAAC,CAC9C,GAAMS,aAAY,CAAGV,KAAK,CAACW,SAAS,CAEpC,MACE,MAAA,CAAA,aAAA,CAAC,wBAAwB,CAAC,QAAQ,CAAA,IAAA,CAE9BC,SAAAA,OAAiE,CAC9D,CACH,GAAMC,QAAuB,CAC1BD,OAAO,EAAIA,OAAO,CAACP,KAAK,GAAKA,KAAK,EAAKC,MAAM,GAAK,SAAS,CAE9D,GAAMQ,gBAAe,CAAGlB,oBAAoB,CAAC,CAAEI,KAAK,CAALA,KAAK,CAAEa,OAAAA,CAAAA,OAAQ,CAAC,CAAC,CAChE,GAAME,YAAW,CAAGf,KAAK,CAACgB,IAAI,CAC1BhB,KAAK,CAACiB,MAAM,CAACC,OAAO,CACpB7B,KAAK,CAACW,KAAK,CAACmB,IAAI,CAAG3B,KAAK,CAAGD,KAAK,CAAC,CAC9B6B,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,EAAE,CACLC,MAAM,EAAE,CAEf,MACE,MAAA,CAAA,aAAA,CAAC,UAAU,CAAA,QAAA,CAAA,CACT,UAAU,CAAE,KAAM,CAClB,IAAI,CAAExB,IAAK,CACX,OAAO,CAAGyB,iBAAAA,CAAkC,CAAK,CAC/C,GAAIhB,QAAO,CAAE,CACXA,QAAO,CAACgB,CAAC,CAAC,CACZ,CAEA,GAAIX,OAAO,CAAE,CACXA,OAAO,CAACY,aAAa,CAAC,CAACX,OAAO,CAAGR,KAAK,CAAG,IAAI,CAAC,CAChD,CACF,CAAE,CACF,IAAI,CAAEN,IAAK,CACX,kBAAkB,CAAEG,kBAAmB,CACvC,kBAAkB,CAAE,CAAEC,QAAQ,CAARA,QAAQ,CAAEsB,QAAQ,CAAEZ,OAAQ,CAAE,CACpD,QAAQ,CAAEV,QAAS,CACnB,KAAK,CAAE,CACLuB,MAAM,CAACC,OAAO,CACd,CACEb,eAAe,CAAfA,eAAe,CACfJ,YAAY,CAAZA,YAAY,CACZK,WAAAA,CAAAA,WACF,CAAC,CACDX,KAAK,CACL,CACF,GAAG,CAAEK,GAAI,CACT,KAAK,CAAET,KAAM,CAAA,CACTQ,IAAI,CAAA,CACR,CAEN,CAAC,CACiC,CAExC,CAAC,CACF,CAED,GAAMkB,OAAM,CAAGE,UAAU,CAACC,MAAM,CAAC,CAC/BF,OAAO,CAAE,CACPG,KAAK,CAAE,EAAE,CACTC,MAAM,CAAE,EAAE,CACVC,MAAM,CAAE,CACV,CACF,CAAC,CAAC,CAEF,cAAenC,aAAY,CAG3B,OAASA,YAAY","sourceRoot":"../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport color from 'color';\nimport { useInternalTheme } from '../../core/theming';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport { forwardRef } from '../../utils/forwardRef';\nimport IconButton from '../IconButton/IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { getToggleButtonColor } from './utils';\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = forwardRef((_ref, ref) => {\n  let {\n    icon,\n    size,\n    theme: themeOverrides,\n    accessibilityLabel,\n    disabled,\n    style,\n    value,\n    status,\n    onPress,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const borderRadius = theme.roundness;\n  return /*#__PURE__*/React.createElement(ToggleButtonGroupContext.Consumer, null, context => {\n    const checked = context && context.value === value || status === 'checked';\n    const backgroundColor = getToggleButtonColor({\n      theme,\n      checked\n    });\n    const borderColor = theme.isV3 ? theme.colors.outline : color(theme.dark ? white : black).alpha(0.29).rgb().string();\n    return /*#__PURE__*/React.createElement(IconButton, _extends({\n      borderless: false,\n      icon: icon,\n      onPress: e => {\n        if (onPress) {\n          onPress(e);\n        }\n        if (context) {\n          context.onValueChange(!checked ? value : null);\n        }\n      },\n      size: size,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityState: {\n        disabled,\n        selected: checked\n      },\n      disabled: disabled,\n      style: [styles.content, {\n        backgroundColor,\n        borderRadius,\n        borderColor\n      }, style],\n      ref: ref,\n      theme: theme\n    }, rest));\n  });\n});\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\nexport default ToggleButton;\n\n// @component-docs ignore-next-line\nexport { ToggleButton };\n//# sourceMappingURL=ToggleButton.js.map"]},"metadata":{},"sourceType":"module"}