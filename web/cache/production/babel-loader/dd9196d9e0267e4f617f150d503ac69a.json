{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';export var ListAccordionGroupContext=React.createContext(null);var ListAccordionGroup=function ListAccordionGroup(_ref){var expandedIdProp=_ref.expandedId,onAccordionPress=_ref.onAccordionPress,children=_ref.children;var _React$useState=React.useState(undefined),_React$useState2=_slicedToArray(_React$useState,2),expandedId=_React$useState2[0],setExpandedId=_React$useState2[1];var onAccordionPressDefault=function onAccordionPressDefault(newExpandedId){setExpandedId(function(currentExpandedId){return currentExpandedId===newExpandedId?undefined:newExpandedId;});};return React.createElement(ListAccordionGroupContext.Provider,{value:{expandedId:expandedIdProp||expandedId,onAccordionPress:onAccordionPress||onAccordionPressDefault}},children);};ListAccordionGroup.displayName='List.AccordionGroup';export default ListAccordionGroup;","map":{"version":3,"sources":["ListAccordionGroup.tsx"],"names":["React","ListAccordionGroupContext","createContext","ListAccordionGroup","expandedId","expandedIdProp","onAccordionPress","children","setExpandedId","useState","undefined","onAccordionPressDefault","newExpandedId","currentExpandedId","displayName"],"mappings":"iEAAA,MAAO,GAAKA,MAAK,KAAM,OAAO,CAsB9B,MAAO,IAAMC,0BAAyB,CACpCD,KAAK,CAACE,aAAa,CAAgC,IAAI,CAAC,CAuC1D,GAAMC,mBAAkB,CAAG,QAArBA,mBAAkB,CAAG,IAAA,CAId,CAJe,GACdE,eAAc,CAGpB,IAAA,CAHND,UAAU,CACVE,gBAAgB,CAEV,IAAA,CAFNA,gBAAgB,CAChBC,QAAAA,CACM,IAAA,CADNA,QAAAA,CAEA,oBAAoCP,KAAK,CAACS,QAAQ,CAEhDC,SAAS,CAAC,oDAFLN,UAAU,qBAAEI,aAAa,qBAIhC,GAAMG,wBAAuB,CAAIC,QAA3BD,wBAAuB,CAAIC,aAA8B,CAAK,CAClEJ,aAAa,CAAEK,SAAAA,iBAAiB,QAC9BA,kBAAiB,GAAKD,aAAa,CAAGF,SAAS,CAAGE,aAAa,GAChE,CACH,CAAC,CAED,MACE,MAAA,CAAA,aAAA,CAAC,yBAAyB,CAAC,QAAQ,CAAA,CACjC,KAAK,CAAE,CACLR,UAAU,CAAEC,cAAc,EAAID,UAAU,CACxCE,gBAAgB,CAAEA,gBAAgB,EAAIK,uBACxC,CAAE,CAAA,CAEDJ,QAAQ,CAC0B,CAEzC,CAAC,CAEDJ,kBAAkB,CAACW,WAAW,CAAG,qBAAqB,CAEtD,cAAeX,mBAAkB","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nexport const ListAccordionGroupContext = /*#__PURE__*/React.createContext(null);\n\n/**\n * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.\n * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.\n * At most one Accordion can be expanded at a given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n * );\n *\n * export default MyComponent;\n *```\n */\nconst ListAccordionGroup = _ref => {\n  let {\n    expandedId: expandedIdProp,\n    onAccordionPress,\n    children\n  } = _ref;\n  const [expandedId, setExpandedId] = React.useState(undefined);\n  const onAccordionPressDefault = newExpandedId => {\n    setExpandedId(currentExpandedId => currentExpandedId === newExpandedId ? undefined : newExpandedId);\n  };\n  return /*#__PURE__*/React.createElement(ListAccordionGroupContext.Provider, {\n    value: {\n      expandedId: expandedIdProp || expandedId,\n      // component can be controlled or uncontrolled\n      onAccordionPress: onAccordionPress || onAccordionPressDefault\n    }\n  }, children);\n};\nListAccordionGroup.displayName = 'List.AccordionGroup';\nexport default ListAccordionGroup;\n//# sourceMappingURL=ListAccordionGroup.js.map"]},"metadata":{},"sourceType":"module"}