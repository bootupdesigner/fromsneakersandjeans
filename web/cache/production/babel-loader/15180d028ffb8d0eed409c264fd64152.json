{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"value\",\"disabled\",\"onValueChange\",\"color\",\"theme\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import NativeModules from\"react-native-web/dist/exports/NativeModules\";import Platform from\"react-native-web/dist/exports/Platform\";import NativeSwitch from\"react-native-web/dist/exports/Switch\";import{useInternalTheme}from\"../../core/theming\";import{getSwitchColor}from\"./utils\";var version=NativeModules.PlatformConstants?NativeModules.PlatformConstants.reactNativeVersion:undefined;var Switch=function Switch(_ref){var value=_ref.value,disabled=_ref.disabled,onValueChange=_ref.onValueChange,color=_ref.color,themeOverrides=_ref.theme,rest=_objectWithoutProperties(_ref,_excluded);var theme=useInternalTheme(themeOverrides);var _getSwitchColor=getSwitchColor({theme:theme,disabled:disabled,value:value,color:color}),checkedColor=_getSwitchColor.checkedColor,onTintColor=_getSwitchColor.onTintColor,thumbTintColor=_getSwitchColor.thumbTintColor;var props=version&&version.major===0&&version.minor<=56?{onTintColor:onTintColor,thumbTintColor:thumbTintColor}:Platform.OS==='web'?{activeTrackColor:onTintColor,thumbColor:thumbTintColor,activeThumbColor:checkedColor}:{thumbColor:thumbTintColor,trackColor:{true:onTintColor,false:onTintColor}};return React.createElement(NativeSwitch,_extends({value:value,disabled:disabled,onValueChange:disabled?undefined:onValueChange},props,rest));};export default Switch;","map":{"version":3,"sources":["Switch.tsx"],"names":["React","useInternalTheme","getSwitchColor","version","NativeModules","PlatformConstants","reactNativeVersion","undefined","Switch","value","disabled","onValueChange","color","theme","themeOverrides","rest","checkedColor","onTintColor","thumbTintColor","props","major","minor","Platform","OS","activeTrackColor","thumbColor","activeThumbColor","trackColor","true","false"],"mappings":"mcAAA,MAAO,GAAKA,MAAK,KAAM,OAAO,CAAA,mMAS9B,OAASC,gBAAgB,0BAEzB,OAASC,cAAc,eAEvB,GAAMC,QAAO,CAAGC,aAAa,CAACC,iBAAiB,CAC3CD,aAAa,CAACC,iBAAiB,CAACC,kBAAkB,CAClDC,SAAS,CAgEb,GAAMC,OAAM,CAAG,QAATA,OAAM,CAAG,IAAA,CAOF,CAPG,GACdC,MAAK,CAMC,IAAA,CANNA,KAAK,CACLC,QAAQ,CAKF,IAAA,CALNA,QAAQ,CACRC,aAAa,CAIP,IAAA,CAJNA,aAAa,CACbC,KAAK,CAGC,IAAA,CAHNA,KAAK,CACEE,cAAc,CAEf,IAAA,CAFND,KAAK,CACFE,IAAAA,0BACG,IAAA,YACN,GAAMF,MAAK,CAAGZ,gBAAgB,CAACa,cAAc,CAAC,CAC9C,oBAAsDZ,cAAc,CAAC,CACnEW,KAAK,CAALA,KAAK,CACLH,QAAQ,CAARA,QAAQ,CACRD,KAAK,CAALA,KAAK,CACLG,KAAAA,CAAAA,KACF,CAAC,CAAC,CALMI,YAAY,iBAAZA,YAAY,CAAEC,WAAW,iBAAXA,WAAW,CAAEC,cAAAA,iBAAAA,cAAAA,CAOnC,GAAMC,MAAK,CACThB,OAAO,EAAIA,OAAO,CAACiB,KAAK,GAAK,CAAC,EAAIjB,OAAO,CAACkB,KAAK,EAAI,EAAE,CACjD,CACEJ,WAAW,CAAXA,WAAW,CACXC,cAAAA,CAAAA,cACF,CAAC,CACDI,QAAQ,CAACC,EAAE,GAAK,KAAK,CACrB,CACEC,gBAAgB,CAAEP,WAAW,CAC7BQ,UAAU,CAAEP,cAAc,CAC1BQ,gBAAgB,CAAEV,YACpB,CAAC,CACD,CACES,UAAU,CAAEP,cAAc,CAC1BS,UAAU,CAAE,CACVC,IAAI,CAAEX,WAAW,CACjBY,KAAK,CAAEZ,WACT,CACF,CAAC,CAEP,MACE,MAAA,CAAA,aAAA,CAAC,YAAY,CAAA,QAAA,CAAA,CACX,KAAK,CAAER,KAAM,CACb,QAAQ,CAAEC,QAAS,CACnB,aAAa,CAAEA,QAAQ,CAAGH,SAAS,CAAGI,aAAc,CAAA,CAChDQ,KAAK,CACLJ,IAAI,CAAA,CACR,CAEN,CAAC,CAED,cAAeP,OAAM","sourceRoot":"../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport { NativeModules, Platform, Switch as NativeSwitch } from 'react-native';\nimport { useInternalTheme } from '../../core/theming';\nimport { getSwitchColor } from './utils';\nconst version = NativeModules.PlatformConstants ? NativeModules.PlatformConstants.reactNativeVersion : undefined;\n/**\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [isSwitchOn, setIsSwitchOn] = React.useState(false);\n *\n *   const onToggleSwitch = () => setIsSwitchOn(!isSwitchOn);\n *\n *   return <Switch value={isSwitchOn} onValueChange={onToggleSwitch} />;\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Switch = _ref => {\n  let {\n    value,\n    disabled,\n    onValueChange,\n    color,\n    theme: themeOverrides,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const {\n    checkedColor,\n    onTintColor,\n    thumbTintColor\n  } = getSwitchColor({\n    theme,\n    disabled,\n    value,\n    color\n  });\n  const props = version && version.major === 0 && version.minor <= 56 ? {\n    onTintColor,\n    thumbTintColor\n  } : Platform.OS === 'web' ? {\n    activeTrackColor: onTintColor,\n    thumbColor: thumbTintColor,\n    activeThumbColor: checkedColor\n  } : {\n    thumbColor: thumbTintColor,\n    trackColor: {\n      true: onTintColor,\n      false: onTintColor\n    }\n  };\n  return /*#__PURE__*/React.createElement(NativeSwitch, _extends({\n    value: value,\n    disabled: disabled,\n    onValueChange: disabled ? undefined : onValueChange\n  }, props, rest));\n};\nexport default Switch;\n//# sourceMappingURL=Switch.js.map"]},"metadata":{},"sourceType":"module"}