{"ast":null,"code":"var __assign=this&&this.__assign||function(){__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p];}return t;};return __assign.apply(this,arguments);};import{Rect,Size,Point,Placement}from\"./Types\";import{getBorderRadius}from\"./Utility\";import{POPOVER_MARGIN}from\"./Constants\";var Geometry=function(){function Geometry(_a){var popoverOrigin=_a.popoverOrigin,anchorPoint=_a.anchorPoint,placement=_a.placement,forcedContentSize=_a.forcedContentSize,viewLargerThanDisplayArea=_a.viewLargerThanDisplayArea;this.popoverOrigin=popoverOrigin;this.anchorPoint=anchorPoint;this.placement=placement;this.forcedContentSize=forcedContentSize;this.viewLargerThanDisplayArea=viewLargerThanDisplayArea;}Geometry.equals=function(a,b){var _a,_b,_c,_d;return a.popoverOrigin.equals(b.popoverOrigin)&&a.anchorPoint.equals(b.anchorPoint)&&a.placement===b.placement&&a.forcedContentSize.equals(b.forcedContentSize)&&((_a=a.viewLargerThanDisplayArea)===null||_a===void 0?void 0:_a.width)===((_b=b.viewLargerThanDisplayArea)===null||_b===void 0?void 0:_b.width)&&((_c=a.viewLargerThanDisplayArea)===null||_c===void 0?void 0:_c.height)===((_d=b.viewLargerThanDisplayArea)===null||_d===void 0?void 0:_d.height);};return Geometry;}();export{Geometry};export function computeGeometry(options){var requestedContentSize=options.requestedContentSize,placement=options.placement,displayArea=options.displayArea,debug=options.debug,popoverStyle=options.popoverStyle,arrowShift=options.arrowShift,popoverShift=options.popoverShift,arrowSize=options.arrowSize;var newGeom=null;var fromRect=options.fromRect?Rect.clone(options.fromRect):null;if(fromRect&&options.fromRect instanceof Rect){var borderRadius=getBorderRadius(popoverStyle);var selectedPlacement=Array.isArray(placement)?placement[0]:placement;if(Array.isArray(placement)){var spaceList=generateSpaceList({fromRect:fromRect,displayArea:displayArea,requestedContentSize:requestedContentSize,arrowSize:arrowSize});var bestPlacements_1=calculateBestPlacements(spaceList);var bestProvidedPlacement=placement.filter(function(p){return p===Placement.AUTO||p===Placement.FLOATING||bestPlacements_1.includes(p);})[0];if(bestProvidedPlacement)selectedPlacement=bestProvidedPlacement;}switch(selectedPlacement){case Placement.TOP:newGeom=computeTopGeometry(__assign(__assign({},options),{fromRect:fromRect,borderRadius:borderRadius}));break;case Placement.BOTTOM:newGeom=computeBottomGeometry(__assign(__assign({},options),{fromRect:fromRect,borderRadius:borderRadius}));break;case Placement.LEFT:newGeom=computeLeftGeometry(__assign(__assign({},options),{fromRect:fromRect,borderRadius:borderRadius}));break;case Placement.RIGHT:newGeom=computeRightGeometry(__assign(__assign({},options),{fromRect:fromRect,borderRadius:borderRadius}));break;case Placement.FLOATING:newGeom=null;break;default:newGeom=computeAutoGeometry(__assign(__assign({},options),{fromRect:fromRect,borderRadius:borderRadius}));}debug('computeGeometry - initial chosen geometry',newGeom);if(newGeom&&(newGeom.viewLargerThanDisplayArea.width||newGeom.viewLargerThanDisplayArea.height)){var fromRectHeightVisible=fromRect.y<displayArea.y?fromRect.height-(displayArea.y-fromRect.y):displayArea.y+displayArea.height-fromRect.y;if(fromRect.width>requestedContentSize.width&&fromRectHeightVisible>requestedContentSize.height){var preferredX=Math.max(fromRect.x+10,fromRect.x+(fromRect.width-requestedContentSize.width)/2);var preferredY=Math.max(fromRect.y+10,fromRect.y+(fromRect.height-requestedContentSize.height)/2);var constrainedX=Math.max(preferredX,displayArea.x);if(constrainedX+requestedContentSize.width>displayArea.x+displayArea.width)constrainedX=displayArea.x+displayArea.width-requestedContentSize.width;var constrainedY=Math.max(preferredY,displayArea.y);if(constrainedY+requestedContentSize.height>displayArea.y+displayArea.height)constrainedY=displayArea.y+displayArea.height-requestedContentSize.height;var forcedContentSize=new Size(Math.min(fromRect.width-20,displayArea.width),Math.min(fromRect.height-20,displayArea.height));debug('computeGeometry - showing inside anchor');newGeom=new Geometry({popoverOrigin:new Point(constrainedX,constrainedY),anchorPoint:new Point(fromRect.x+fromRect.width/2,fromRect.y+fromRect.height/2),placement:Placement.FLOATING,forcedContentSize:forcedContentSize,viewLargerThanDisplayArea:{width:requestedContentSize.width>forcedContentSize.width,height:requestedContentSize.height>forcedContentSize.height}});}else if(placement===Placement.AUTO&&(newGeom.viewLargerThanDisplayArea.width&&[Placement.RIGHT,Placement.LEFT].includes(newGeom.placement)||newGeom.viewLargerThanDisplayArea.height&&[Placement.TOP,Placement.BOTTOM].includes(newGeom.placement))){newGeom=null;}}}if(!newGeom){var minY=displayArea.y;var minX=displayArea.x;var preferedY=(displayArea.height-requestedContentSize.height)/2+displayArea.y;var preferedX=(displayArea.width-requestedContentSize.width)/2+displayArea.x;debug('computeGeometry - showing floating');newGeom=new Geometry({popoverOrigin:new Point(Math.max(minX,preferedX),Math.max(minY,preferedY)),anchorPoint:new Point(displayArea.width/2+displayArea.x,displayArea.height/2+displayArea.y),placement:Placement.FLOATING,forcedContentSize:new Size(displayArea.width,displayArea.height),viewLargerThanDisplayArea:{width:preferedX<minX-1,height:preferedY<minY-1}});if(!newGeom.viewLargerThanDisplayArea.width&&(popoverShift===null||popoverShift===void 0?void 0:popoverShift.x)){debug('computeGeometry - applying popoverShift.x',popoverShift.x);var horizontalMargin=(displayArea.width-requestedContentSize.width)/2;newGeom.popoverOrigin.x+=popoverShift.x*horizontalMargin;newGeom.anchorPoint.x=newGeom.popoverOrigin.x+requestedContentSize.width/2;}if(!newGeom.viewLargerThanDisplayArea.height&&(popoverShift===null||popoverShift===void 0?void 0:popoverShift.y)){debug('computeGeometry - applying popoverShift.y',popoverShift.y);var verticalMargin=(displayArea.height-requestedContentSize.height)/2;newGeom.popoverOrigin.y+=popoverShift.y*verticalMargin;newGeom.anchorPoint.y=newGeom.popoverOrigin.y+requestedContentSize.height/2;}}if(arrowShift&&fromRect){if(newGeom.placement===Placement.BOTTOM||newGeom.placement===Placement.TOP)newGeom.anchorPoint.x+=arrowShift*0.5*fromRect.width;else newGeom.anchorPoint.y+=arrowShift*0.5*fromRect.height;}debug('computeGeometry - final chosen geometry',newGeom);return newGeom;}function computeTopGeometry(_a){var displayArea=_a.displayArea,fromRect=_a.fromRect,requestedContentSize=_a.requestedContentSize,arrowSize=_a.arrowSize,borderRadius=_a.borderRadius,offset=_a.offset;displayArea=new Rect(displayArea.x+POPOVER_MARGIN,displayArea.y+POPOVER_MARGIN,displayArea.width-POPOVER_MARGIN*2,displayArea.height);if(offset)fromRect.y-=offset;var minY=displayArea.y;var maxY=displayArea.y+displayArea.height;var preferredY=fromRect.y-requestedContentSize.height-arrowSize.height;var forcedContentSize=new Size(displayArea.width,fromRect.y-arrowSize.height-displayArea.y);var viewLargerThanDisplayArea={height:preferredY<=minY-1,width:requestedContentSize.width>=displayArea.width+1};var viewWidth=viewLargerThanDisplayArea.width?forcedContentSize.width:requestedContentSize.width;var maxX=displayArea.x+displayArea.width-viewWidth;var minX=displayArea.x;var preferredX=fromRect.x+(fromRect.width-viewWidth)/2;var popoverOrigin=new Point(Math.min(maxX,Math.max(minX,preferredX)),Math.min(maxY,Math.max(minY,preferredY)));var anchorPoint=new Point(fromRect.x+fromRect.width/2,fromRect.y);anchorPoint.x=Math.max(anchorPoint.x,popoverOrigin.x+arrowSize.width/2+borderRadius);anchorPoint.x=Math.min(anchorPoint.x,displayArea.x+displayArea.width-arrowSize.width/2-borderRadius);return new Geometry({popoverOrigin:popoverOrigin,anchorPoint:anchorPoint,placement:Placement.TOP,forcedContentSize:forcedContentSize,viewLargerThanDisplayArea:viewLargerThanDisplayArea});}function computeBottomGeometry(_a){var displayArea=_a.displayArea,fromRect=_a.fromRect,requestedContentSize=_a.requestedContentSize,arrowSize=_a.arrowSize,borderRadius=_a.borderRadius,offset=_a.offset;displayArea=new Rect(displayArea.x+POPOVER_MARGIN,displayArea.y,displayArea.width-POPOVER_MARGIN*2,displayArea.height-POPOVER_MARGIN);if(offset)fromRect.y+=offset;var minY=displayArea.y;var maxY=displayArea.y+displayArea.height;var preferedY=fromRect.y+fromRect.height;var forcedContentSize=new Size(displayArea.width,displayArea.y+displayArea.height-preferedY);var viewLargerThanDisplayArea={height:preferedY+requestedContentSize.height>=displayArea.y+displayArea.height+1,width:requestedContentSize.width>=displayArea.width+1};var viewWidth=viewLargerThanDisplayArea.width?forcedContentSize.width:requestedContentSize.width;var maxX=displayArea.x+displayArea.width-viewWidth;var minX=displayArea.x;var preferedX=fromRect.x+(fromRect.width-viewWidth)/2;var popoverOrigin=new Point(Math.min(maxX,Math.max(minX,preferedX)),Math.min(maxY,Math.max(minY,preferedY)));var anchorPoint=new Point(fromRect.x+fromRect.width/2,fromRect.y+fromRect.height);anchorPoint.x=Math.max(anchorPoint.x,popoverOrigin.x+arrowSize.width/2+borderRadius);anchorPoint.x=Math.min(anchorPoint.x,displayArea.x+displayArea.width-arrowSize.width/2-borderRadius);return new Geometry({popoverOrigin:popoverOrigin,anchorPoint:anchorPoint,placement:Placement.BOTTOM,forcedContentSize:forcedContentSize,viewLargerThanDisplayArea:viewLargerThanDisplayArea});}function computeLeftGeometry(_a){var displayArea=_a.displayArea,fromRect=_a.fromRect,requestedContentSize=_a.requestedContentSize,borderRadius=_a.borderRadius,arrowSize=_a.arrowSize,offset=_a.offset;displayArea=new Rect(displayArea.x+POPOVER_MARGIN,displayArea.y+POPOVER_MARGIN,displayArea.width,displayArea.height-POPOVER_MARGIN*2);if(offset)fromRect.x-=offset;var forcedContentSize=new Size(fromRect.x-displayArea.x-arrowSize.width,displayArea.height);var viewLargerThanDisplayArea={height:requestedContentSize.height>=displayArea.height+1,width:requestedContentSize.width>=fromRect.x-displayArea.x-arrowSize.width+1};var viewWidth=viewLargerThanDisplayArea.width?forcedContentSize.width:requestedContentSize.width;var viewHeight=viewLargerThanDisplayArea.height?forcedContentSize.height:requestedContentSize.height;var preferedX=fromRect.x-viewWidth-arrowSize.height;var minX=displayArea.x;var maxX=displayArea.x+displayArea.width;var preferedY=fromRect.y+(fromRect.height-viewHeight)/2;var minY=displayArea.y;var maxY=displayArea.height-viewHeight+displayArea.y;var popoverOrigin=new Point(Math.min(Math.max(minX,preferedX),maxX),Math.min(Math.max(minY,preferedY),maxY));var anchorPoint=new Point(fromRect.x,fromRect.y+fromRect.height/2);anchorPoint.y=Math.max(anchorPoint.y,popoverOrigin.y+arrowSize.height/2+borderRadius);anchorPoint.y=Math.min(anchorPoint.y,displayArea.y+displayArea.height-arrowSize.height/2-borderRadius);return new Geometry({popoverOrigin:popoverOrigin,anchorPoint:anchorPoint,placement:Placement.LEFT,forcedContentSize:forcedContentSize,viewLargerThanDisplayArea:viewLargerThanDisplayArea});}function computeRightGeometry(_a){var displayArea=_a.displayArea,fromRect=_a.fromRect,requestedContentSize=_a.requestedContentSize,arrowSize=_a.arrowSize,borderRadius=_a.borderRadius,offset=_a.offset;displayArea=new Rect(displayArea.x,displayArea.y+POPOVER_MARGIN,displayArea.width-POPOVER_MARGIN,displayArea.height-POPOVER_MARGIN*2);if(offset)fromRect.x+=offset;var horizontalSpace=displayArea.x+displayArea.width-(fromRect.x+fromRect.width)-arrowSize.width;var forcedContentSize=new Size(horizontalSpace,displayArea.height);var viewLargerThanDisplayArea={height:requestedContentSize.height>=displayArea.height+1,width:requestedContentSize.width>=horizontalSpace+1};var viewHeight=viewLargerThanDisplayArea.height?forcedContentSize.height:requestedContentSize.height;var preferedX=fromRect.x+fromRect.width;var minX=displayArea.x;var maxX=displayArea.x+displayArea.width;var preferedY=fromRect.y+(fromRect.height-viewHeight)/2;var minY=displayArea.y;var maxY=displayArea.height-viewHeight+displayArea.y;var popoverOrigin=new Point(Math.min(Math.max(minX,preferedX),maxX),Math.min(Math.max(minY,preferedY),maxY));var anchorPoint=new Point(fromRect.x+fromRect.width,fromRect.y+fromRect.height/2.0);anchorPoint.y=Math.max(anchorPoint.y,popoverOrigin.y+arrowSize.height/2+borderRadius);anchorPoint.y=Math.min(anchorPoint.y,displayArea.y+displayArea.height-arrowSize.height/2-borderRadius);return new Geometry({popoverOrigin:popoverOrigin,anchorPoint:anchorPoint,placement:Placement.RIGHT,forcedContentSize:forcedContentSize,viewLargerThanDisplayArea:viewLargerThanDisplayArea});}function generateSpaceList(_a){var _b;var fromRect=_a.fromRect,displayArea=_a.displayArea,arrowSize=_a.arrowSize,requestedContentSize=_a.requestedContentSize;function generateOption(props){return __assign(__assign({},props),{fits:props.sizeAvailable>=props.sizeRequested,extraSpace:props.sizeAvailable-props.sizeRequested});}return _b={},_b[Placement.LEFT]=generateOption({sizeAvailable:fromRect.x-displayArea.x-arrowSize.width,sizeRequested:requestedContentSize.width}),_b[Placement.RIGHT]=generateOption({sizeAvailable:displayArea.x+displayArea.width-(fromRect.x+fromRect.width)-arrowSize.width,sizeRequested:requestedContentSize.width}),_b[Placement.TOP]=generateOption({sizeAvailable:fromRect.y-displayArea.y-arrowSize.width,sizeRequested:requestedContentSize.height}),_b[Placement.BOTTOM]=generateOption({sizeAvailable:displayArea.y+displayArea.height-(fromRect.y+fromRect.height)-arrowSize.width,sizeRequested:requestedContentSize.height}),_b;}function computeAutoGeometry(options){var displayArea=options.displayArea,requestedContentSize=options.requestedContentSize,fromRect=options.fromRect,previousPlacement=options.previousPlacement,debug=options.debug,arrowSize=options.arrowSize;if(previousPlacement===Placement.LEFT||previousPlacement===Placement.RIGHT){var geom=previousPlacement===Placement.LEFT?computeLeftGeometry(options):computeRightGeometry(options);debug('computeAutoGeometry - Left/right tryping to keep same, geometry',geom);if(!geom.viewLargerThanDisplayArea.width)return geom;}if(previousPlacement===Placement.TOP||previousPlacement===Placement.BOTTOM){var geom=previousPlacement===Placement.TOP?computeTopGeometry(options):computeBottomGeometry(options);debug('computeAutoGeometry - Top/bottom tryping to keep same, geometry',geom);if(!geom.viewLargerThanDisplayArea.height)return geom;}debug('computeAutoGeometry - displayArea',displayArea);debug('computeAutoGeometry - fromRect',fromRect);var spaceList=generateSpaceList({fromRect:fromRect,displayArea:displayArea,arrowSize:arrowSize,requestedContentSize:requestedContentSize});debug('computeAutoGeometry - List of available space',spaceList);var bestPlacementPosition=calculateBestPlacements(spaceList)[0];debug('computeAutoGeometry - Found best postition for placement',bestPlacementPosition);switch(bestPlacementPosition){case Placement.LEFT:return computeLeftGeometry(options);case Placement.RIGHT:return computeRightGeometry(options);case Placement.BOTTOM:return computeBottomGeometry(options);case Placement.TOP:return computeTopGeometry(options);default:return null;}}function calculateBestPlacements(spaceList){return Object.keys(spaceList).filter(function(o){var _a;return(_a=spaceList[o])===null||_a===void 0?void 0:_a.fits;}).sort(function(a,b){var _a,_b,_c,_d;return((_b=(_a=spaceList[b])===null||_a===void 0?void 0:_a.extraSpace)!==null&&_b!==void 0?_b:0)-((_d=(_c=spaceList[a])===null||_c===void 0?void 0:_c.extraSpace)!==null&&_d!==void 0?_d:0);});}","map":{"version":3,"sources":["../src/Geometry.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { Rect, Size, Point, Placement } from './Types';\nimport { getBorderRadius } from './Utility';\nimport { POPOVER_MARGIN } from './Constants';\nvar Geometry = /** @class */ (function () {\n    function Geometry(_a) {\n        var popoverOrigin = _a.popoverOrigin, anchorPoint = _a.anchorPoint, placement = _a.placement, forcedContentSize = _a.forcedContentSize, viewLargerThanDisplayArea = _a.viewLargerThanDisplayArea;\n        this.popoverOrigin = popoverOrigin;\n        this.anchorPoint = anchorPoint;\n        this.placement = placement;\n        this.forcedContentSize = forcedContentSize;\n        this.viewLargerThanDisplayArea = viewLargerThanDisplayArea;\n    }\n    Geometry.equals = function (a, b) {\n        var _a, _b, _c, _d;\n        return a.popoverOrigin.equals(b.popoverOrigin) &&\n            a.anchorPoint.equals(b.anchorPoint) &&\n            a.placement === b.placement &&\n            a.forcedContentSize.equals(b.forcedContentSize) &&\n            ((_a = a.viewLargerThanDisplayArea) === null || _a === void 0 ? void 0 : _a.width) === ((_b = b.viewLargerThanDisplayArea) === null || _b === void 0 ? void 0 : _b.width) &&\n            ((_c = a.viewLargerThanDisplayArea) === null || _c === void 0 ? void 0 : _c.height) === ((_d = b.viewLargerThanDisplayArea) === null || _d === void 0 ? void 0 : _d.height);\n    };\n    return Geometry;\n}());\nexport { Geometry };\nexport function computeGeometry(options) {\n    var requestedContentSize = options.requestedContentSize, placement = options.placement, displayArea = options.displayArea, debug = options.debug, popoverStyle = options.popoverStyle, arrowShift = options.arrowShift, popoverShift = options.popoverShift, arrowSize = options.arrowSize;\n    var newGeom = null;\n    // Make copy so doesn't modify original\n    var fromRect = options.fromRect\n        ? Rect.clone(options.fromRect)\n        : null;\n    if (fromRect && options.fromRect instanceof Rect) {\n        var borderRadius = getBorderRadius(popoverStyle);\n        // Default to first option if given list of placements\n        var selectedPlacement = Array.isArray(placement) ? placement[0] : placement;\n        // If we can find a placement in the list that is better, use that\n        if (Array.isArray(placement)) {\n            var spaceList = generateSpaceList({ fromRect: fromRect, displayArea: displayArea, requestedContentSize: requestedContentSize, arrowSize: arrowSize });\n            var bestPlacements_1 = calculateBestPlacements(spaceList);\n            var bestProvidedPlacement = placement.\n                filter(function (p) { return p === Placement.AUTO || p === Placement.FLOATING || bestPlacements_1.includes(p); })[0];\n            if (bestProvidedPlacement)\n                selectedPlacement = bestProvidedPlacement;\n        }\n        switch (selectedPlacement) {\n            case Placement.TOP:\n                newGeom = computeTopGeometry(__assign(__assign({}, options), { fromRect: fromRect, borderRadius: borderRadius }));\n                break;\n            case Placement.BOTTOM:\n                newGeom = computeBottomGeometry(__assign(__assign({}, options), { fromRect: fromRect, borderRadius: borderRadius }));\n                break;\n            case Placement.LEFT:\n                newGeom = computeLeftGeometry(__assign(__assign({}, options), { fromRect: fromRect, borderRadius: borderRadius }));\n                break;\n            case Placement.RIGHT:\n                newGeom = computeRightGeometry(__assign(__assign({}, options), { fromRect: fromRect, borderRadius: borderRadius }));\n                break;\n            case Placement.FLOATING:\n                newGeom = null;\n                break;\n            default:\n                newGeom = computeAutoGeometry(__assign(__assign({}, options), { fromRect: fromRect, borderRadius: borderRadius }));\n        }\n        debug('computeGeometry - initial chosen geometry', newGeom);\n        /*\n         * If the popover will be restricted and the view that the popover is showing\n         * from is sufficiently large, try to show the popover inside the view\n         */\n        if (newGeom &&\n            (newGeom.viewLargerThanDisplayArea.width || newGeom.viewLargerThanDisplayArea.height)) {\n            var fromRectHeightVisible = fromRect.y < displayArea.y\n                ? fromRect.height - (displayArea.y - fromRect.y)\n                : displayArea.y + displayArea.height - fromRect.y;\n            if (fromRect.width > requestedContentSize.width &&\n                fromRectHeightVisible > requestedContentSize.height) {\n                var preferredX = Math.max(fromRect.x + 10, fromRect.x + ((fromRect.width - requestedContentSize.width) / 2));\n                var preferredY = Math.max(fromRect.y + 10, fromRect.y + ((fromRect.height - requestedContentSize.height) / 2));\n                var constrainedX = Math.max(preferredX, displayArea.x);\n                if (constrainedX + requestedContentSize.width > displayArea.x + displayArea.width)\n                    constrainedX = displayArea.x + displayArea.width - requestedContentSize.width;\n                var constrainedY = Math.max(preferredY, displayArea.y);\n                if (constrainedY + requestedContentSize.height > displayArea.y + displayArea.height)\n                    constrainedY = displayArea.y + displayArea.height - requestedContentSize.height;\n                var forcedContentSize = new Size(Math.min(fromRect.width - 20, displayArea.width), Math.min(fromRect.height - 20, displayArea.height));\n                debug('computeGeometry - showing inside anchor');\n                newGeom = new Geometry({\n                    popoverOrigin: new Point(constrainedX, constrainedY),\n                    anchorPoint: new Point(fromRect.x + (fromRect.width / 2), fromRect.y + (fromRect.height / 2)),\n                    placement: Placement.FLOATING,\n                    forcedContentSize: forcedContentSize,\n                    viewLargerThanDisplayArea: {\n                        width: requestedContentSize.width > forcedContentSize.width,\n                        height: requestedContentSize.height > forcedContentSize.height\n                    }\n                });\n            }\n            else if (\n            /*\n             * If we can't fit inside or outside the fromRect, show the popover floating on the screen,\n             *  but only do this if they haven't asked for a specifc placement type\n             *  and if it will actually help show more content\n             */\n            placement === Placement.AUTO &&\n                ((newGeom.viewLargerThanDisplayArea.width &&\n                    [Placement.RIGHT, Placement.LEFT].includes(newGeom.placement)) ||\n                    (newGeom.viewLargerThanDisplayArea.height &&\n                        [Placement.TOP, Placement.BOTTOM].includes(newGeom.placement)))) {\n                newGeom = null;\n            }\n        }\n    }\n    if (!newGeom) {\n        var minY = displayArea.y;\n        var minX = displayArea.x;\n        var preferedY = ((displayArea.height - requestedContentSize.height) / 2) + displayArea.y;\n        var preferedX = ((displayArea.width - requestedContentSize.width) / 2) + displayArea.x;\n        debug('computeGeometry - showing floating');\n        newGeom = new Geometry({\n            popoverOrigin: new Point(Math.max(minX, preferedX), Math.max(minY, preferedY)),\n            anchorPoint: new Point((displayArea.width / 2) + displayArea.x, (displayArea.height / 2) + displayArea.y),\n            placement: Placement.FLOATING,\n            forcedContentSize: new Size(displayArea.width, displayArea.height),\n            viewLargerThanDisplayArea: {\n                width: preferedX < minX - 1,\n                height: preferedY < minY - 1\n            }\n        });\n        // Apply popover shift\n        if (!newGeom.viewLargerThanDisplayArea.width && (popoverShift === null || popoverShift === void 0 ? void 0 : popoverShift.x)) {\n            debug('computeGeometry - applying popoverShift.x', popoverShift.x);\n            var horizontalMargin = (displayArea.width - requestedContentSize.width) / 2;\n            newGeom.popoverOrigin.x += popoverShift.x * horizontalMargin;\n            newGeom.anchorPoint.x = newGeom.popoverOrigin.x + (requestedContentSize.width / 2);\n        }\n        if (!newGeom.viewLargerThanDisplayArea.height && (popoverShift === null || popoverShift === void 0 ? void 0 : popoverShift.y)) {\n            debug('computeGeometry - applying popoverShift.y', popoverShift.y);\n            var verticalMargin = (displayArea.height - requestedContentSize.height) / 2;\n            newGeom.popoverOrigin.y += popoverShift.y * verticalMargin;\n            newGeom.anchorPoint.y = newGeom.popoverOrigin.y + (requestedContentSize.height / 2);\n        }\n    }\n    if (arrowShift && fromRect) {\n        if (newGeom.placement === Placement.BOTTOM || newGeom.placement === Placement.TOP)\n            newGeom.anchorPoint.x += arrowShift * 0.5 * fromRect.width;\n        else\n            newGeom.anchorPoint.y += arrowShift * 0.5 * fromRect.height;\n    }\n    debug('computeGeometry - final chosen geometry', newGeom);\n    return newGeom;\n}\nfunction computeTopGeometry(_a) {\n    var displayArea = _a.displayArea, fromRect = _a.fromRect, requestedContentSize = _a.requestedContentSize, arrowSize = _a.arrowSize, borderRadius = _a.borderRadius, offset = _a.offset;\n    // Apply a margin on non-arrow sides\n    displayArea = new Rect(displayArea.x + POPOVER_MARGIN, displayArea.y + POPOVER_MARGIN, displayArea.width - (POPOVER_MARGIN * 2), displayArea.height);\n    if (offset)\n        fromRect.y -= offset;\n    var minY = displayArea.y;\n    var maxY = displayArea.y + displayArea.height;\n    var preferredY = fromRect.y - requestedContentSize.height - arrowSize.height;\n    var forcedContentSize = new Size(displayArea.width, (fromRect.y - arrowSize.height - displayArea.y));\n    var viewLargerThanDisplayArea = {\n        height: preferredY <= minY - 1,\n        width: requestedContentSize.width >= displayArea.width + 1\n    };\n    var viewWidth = viewLargerThanDisplayArea.width\n        ? forcedContentSize.width\n        : requestedContentSize.width;\n    var maxX = displayArea.x + displayArea.width - viewWidth;\n    var minX = displayArea.x;\n    var preferredX = fromRect.x + ((fromRect.width - viewWidth) / 2);\n    var popoverOrigin = new Point(Math.min(maxX, Math.max(minX, preferredX)), Math.min(maxY, Math.max(minY, preferredY)));\n    var anchorPoint = new Point(fromRect.x + (fromRect.width / 2), fromRect.y);\n    // Make sure the arrow isn't cut off\n    anchorPoint.x = Math.max(anchorPoint.x, popoverOrigin.x + (arrowSize.width / 2) + borderRadius);\n    anchorPoint.x = Math.min(anchorPoint.x, displayArea.x + displayArea.width - (arrowSize.width / 2) - borderRadius);\n    return new Geometry({\n        popoverOrigin: popoverOrigin,\n        anchorPoint: anchorPoint,\n        placement: Placement.TOP,\n        forcedContentSize: forcedContentSize,\n        viewLargerThanDisplayArea: viewLargerThanDisplayArea\n    });\n}\nfunction computeBottomGeometry(_a) {\n    var displayArea = _a.displayArea, fromRect = _a.fromRect, requestedContentSize = _a.requestedContentSize, arrowSize = _a.arrowSize, borderRadius = _a.borderRadius, offset = _a.offset;\n    // Apply a margin on non-arrow sides\n    displayArea = new Rect(displayArea.x + POPOVER_MARGIN, displayArea.y, displayArea.width - (POPOVER_MARGIN * 2), displayArea.height - POPOVER_MARGIN);\n    if (offset)\n        fromRect.y += offset;\n    var minY = displayArea.y;\n    var maxY = displayArea.y + displayArea.height;\n    var preferedY = fromRect.y + fromRect.height;\n    var forcedContentSize = new Size(displayArea.width, displayArea.y + displayArea.height - preferedY);\n    var viewLargerThanDisplayArea = {\n        height: preferedY + requestedContentSize.height >= displayArea.y + displayArea.height + 1,\n        width: requestedContentSize.width >= displayArea.width + 1\n    };\n    var viewWidth = viewLargerThanDisplayArea.width\n        ? forcedContentSize.width\n        : requestedContentSize.width;\n    var maxX = displayArea.x + displayArea.width - viewWidth;\n    var minX = displayArea.x;\n    var preferedX = fromRect.x + ((fromRect.width - viewWidth) / 2);\n    var popoverOrigin = new Point(Math.min(maxX, Math.max(minX, preferedX)), Math.min(maxY, Math.max(minY, preferedY)));\n    var anchorPoint = new Point(fromRect.x + (fromRect.width / 2), fromRect.y + fromRect.height);\n    // Make sure the arrow isn't cut off\n    anchorPoint.x = Math.max(anchorPoint.x, popoverOrigin.x + (arrowSize.width / 2) + borderRadius);\n    anchorPoint.x = Math.min(anchorPoint.x, displayArea.x + displayArea.width - (arrowSize.width / 2) - borderRadius);\n    return new Geometry({\n        popoverOrigin: popoverOrigin,\n        anchorPoint: anchorPoint,\n        placement: Placement.BOTTOM,\n        forcedContentSize: forcedContentSize,\n        viewLargerThanDisplayArea: viewLargerThanDisplayArea\n    });\n}\nfunction computeLeftGeometry(_a) {\n    var displayArea = _a.displayArea, fromRect = _a.fromRect, requestedContentSize = _a.requestedContentSize, borderRadius = _a.borderRadius, arrowSize = _a.arrowSize, offset = _a.offset;\n    // Apply a margin on non-arrow sides\n    displayArea = new Rect(displayArea.x + POPOVER_MARGIN, displayArea.y + POPOVER_MARGIN, displayArea.width, displayArea.height - (POPOVER_MARGIN * 2));\n    if (offset)\n        fromRect.x -= offset;\n    var forcedContentSize = new Size(fromRect.x - displayArea.x - arrowSize.width, displayArea.height);\n    var viewLargerThanDisplayArea = {\n        height: requestedContentSize.height >= displayArea.height + 1,\n        width: requestedContentSize.width >= fromRect.x - displayArea.x - arrowSize.width + 1\n    };\n    var viewWidth = viewLargerThanDisplayArea.width\n        ? forcedContentSize.width\n        : requestedContentSize.width;\n    var viewHeight = viewLargerThanDisplayArea.height\n        ? forcedContentSize.height\n        : requestedContentSize.height;\n    var preferedX = fromRect.x - viewWidth - arrowSize.height;\n    var minX = displayArea.x;\n    var maxX = displayArea.x + displayArea.width;\n    var preferedY = fromRect.y + ((fromRect.height - viewHeight) / 2);\n    var minY = displayArea.y;\n    var maxY = (displayArea.height - viewHeight) + displayArea.y;\n    var popoverOrigin = new Point(Math.min(Math.max(minX, preferedX), maxX), Math.min(Math.max(minY, preferedY), maxY));\n    var anchorPoint = new Point(fromRect.x, fromRect.y + (fromRect.height / 2));\n    // Make sure the arrow isn't cut off\n    anchorPoint.y = Math.max(anchorPoint.y, popoverOrigin.y + (arrowSize.height / 2) + borderRadius);\n    anchorPoint.y = Math.min(anchorPoint.y, displayArea.y + displayArea.height - (arrowSize.height / 2) - borderRadius);\n    return new Geometry({\n        popoverOrigin: popoverOrigin,\n        anchorPoint: anchorPoint,\n        placement: Placement.LEFT,\n        forcedContentSize: forcedContentSize,\n        viewLargerThanDisplayArea: viewLargerThanDisplayArea\n    });\n}\nfunction computeRightGeometry(_a) {\n    var displayArea = _a.displayArea, fromRect = _a.fromRect, requestedContentSize = _a.requestedContentSize, arrowSize = _a.arrowSize, borderRadius = _a.borderRadius, offset = _a.offset;\n    // Apply a margin on non-arrow sides\n    displayArea = new Rect(displayArea.x, displayArea.y + POPOVER_MARGIN, displayArea.width - POPOVER_MARGIN, displayArea.height - (POPOVER_MARGIN * 2));\n    if (offset)\n        fromRect.x += offset;\n    var horizontalSpace = displayArea.x + displayArea.width - (fromRect.x + fromRect.width) - arrowSize.width;\n    var forcedContentSize = new Size(horizontalSpace, displayArea.height);\n    var viewLargerThanDisplayArea = {\n        height: requestedContentSize.height >= displayArea.height + 1,\n        width: requestedContentSize.width >= horizontalSpace + 1\n    };\n    var viewHeight = viewLargerThanDisplayArea.height\n        ? forcedContentSize.height\n        : requestedContentSize.height;\n    var preferedX = fromRect.x + fromRect.width;\n    var minX = displayArea.x;\n    var maxX = displayArea.x + displayArea.width;\n    var preferedY = fromRect.y + ((fromRect.height - viewHeight) / 2);\n    var minY = displayArea.y;\n    var maxY = (displayArea.height - viewHeight) + displayArea.y;\n    var popoverOrigin = new Point(Math.min(Math.max(minX, preferedX), maxX), Math.min(Math.max(minY, preferedY), maxY));\n    var anchorPoint = new Point(fromRect.x + fromRect.width, fromRect.y + (fromRect.height / 2.0));\n    // Make sure the arrow isn't cut off\n    anchorPoint.y = Math.max(anchorPoint.y, popoverOrigin.y + (arrowSize.height / 2) + borderRadius);\n    anchorPoint.y = Math.min(anchorPoint.y, displayArea.y + displayArea.height - (arrowSize.height / 2) - borderRadius);\n    return new Geometry({\n        popoverOrigin: popoverOrigin,\n        anchorPoint: anchorPoint,\n        placement: Placement.RIGHT,\n        forcedContentSize: forcedContentSize,\n        viewLargerThanDisplayArea: viewLargerThanDisplayArea\n    });\n}\nfunction generateSpaceList(_a) {\n    var _b;\n    var fromRect = _a.fromRect, displayArea = _a.displayArea, arrowSize = _a.arrowSize, requestedContentSize = _a.requestedContentSize;\n    function generateOption(props) {\n        return __assign(__assign({}, props), { fits: props.sizeAvailable >= props.sizeRequested, extraSpace: props.sizeAvailable - props.sizeRequested });\n    }\n    return _b = {},\n        _b[Placement.LEFT] = generateOption({\n            sizeAvailable: fromRect.x - displayArea.x - arrowSize.width,\n            sizeRequested: requestedContentSize.width\n        }),\n        _b[Placement.RIGHT] = generateOption({\n            sizeAvailable: displayArea.x + displayArea.width - (fromRect.x + fromRect.width) - arrowSize.width,\n            sizeRequested: requestedContentSize.width\n        }),\n        _b[Placement.TOP] = generateOption({\n            sizeAvailable: fromRect.y - displayArea.y - arrowSize.width,\n            sizeRequested: requestedContentSize.height\n        }),\n        _b[Placement.BOTTOM] = generateOption({\n            sizeAvailable: displayArea.y + displayArea.height - (fromRect.y + fromRect.height) - arrowSize.width,\n            sizeRequested: requestedContentSize.height\n        }),\n        _b;\n}\nfunction computeAutoGeometry(options) {\n    var displayArea = options.displayArea, requestedContentSize = options.requestedContentSize, fromRect = options.fromRect, previousPlacement = options.previousPlacement, debug = options.debug, arrowSize = options.arrowSize;\n    // Keep same placement if possible (left/right)\n    if (previousPlacement === Placement.LEFT || previousPlacement === Placement.RIGHT) {\n        var geom = previousPlacement === Placement.LEFT\n            ? computeLeftGeometry(options)\n            : computeRightGeometry(options);\n        debug('computeAutoGeometry - Left/right tryping to keep same, geometry', geom);\n        if (!geom.viewLargerThanDisplayArea.width)\n            return geom;\n    }\n    // Keep same placement if possible (top/bottom)\n    if (previousPlacement === Placement.TOP || previousPlacement === Placement.BOTTOM) {\n        var geom = previousPlacement === Placement.TOP\n            ? computeTopGeometry(options)\n            : computeBottomGeometry(options);\n        debug('computeAutoGeometry - Top/bottom tryping to keep same, geometry', geom);\n        if (!geom.viewLargerThanDisplayArea.height)\n            return geom;\n    }\n    /*\n     * Otherwise, find the place that can fit it best (try left/right but\n     * default to top/bottom as that will typically have more space)\n     */\n    // generating list of all possible sides with validity\n    debug('computeAutoGeometry - displayArea', displayArea);\n    debug('computeAutoGeometry - fromRect', fromRect);\n    var spaceList = generateSpaceList({ fromRect: fromRect, displayArea: displayArea, arrowSize: arrowSize, requestedContentSize: requestedContentSize });\n    debug('computeAutoGeometry - List of available space', spaceList);\n    var bestPlacementPosition = calculateBestPlacements(spaceList)[0];\n    debug('computeAutoGeometry - Found best postition for placement', bestPlacementPosition);\n    switch (bestPlacementPosition) {\n        case Placement.LEFT: return computeLeftGeometry(options);\n        case Placement.RIGHT: return computeRightGeometry(options);\n        case Placement.BOTTOM: return computeBottomGeometry(options);\n        case Placement.TOP: return computeTopGeometry(options);\n        // Return nothing so popover will be placed in middle of screen\n        default: return null;\n    }\n}\nfunction calculateBestPlacements(spaceList) {\n    return Object.keys(spaceList).filter(function (o) { var _a; return (_a = spaceList[o]) === null || _a === void 0 ? void 0 : _a.fits; }).sort(function (a, b) { var _a, _b, _c, _d; return ((_b = (_a = spaceList[b]) === null || _a === void 0 ? void 0 : _a.extraSpace) !== null && _b !== void 0 ? _b : 0) - ((_d = (_c = spaceList[a]) === null || _c === void 0 ? void 0 : _c.extraSpace) !== null && _d !== void 0 ? _d : 0); });\n}\n//# sourceMappingURL=Geometry.js.map"]},"metadata":{},"sourceType":"module"}