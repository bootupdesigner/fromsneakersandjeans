{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import color from'color';import{useInternalTheme}from\"../../core/theming\";import Icon from\"../Icon\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import Text from\"../Typography/Text\";import{getSegmentedButtonBorderRadius,getSegmentedButtonColors,getSegmentedButtonDensityPadding}from\"./utils\";var SegmentedButtonItem=function SegmentedButtonItem(_ref){var checked=_ref.checked,accessibilityLabel=_ref.accessibilityLabel,disabled=_ref.disabled,style=_ref.style,showSelectedCheck=_ref.showSelectedCheck,icon=_ref.icon,testID=_ref.testID,label=_ref.label,onPress=_ref.onPress,segment=_ref.segment,_ref$density=_ref.density,density=_ref$density===void 0?'regular':_ref$density,themeOverrides=_ref.theme;var theme=useInternalTheme(themeOverrides);var checkScale=React.useRef(new Animated.Value(0)).current;React.useEffect(function(){if(!showSelectedCheck){return;}if(checked){Animated.spring(checkScale,{toValue:1,useNativeDriver:true}).start();}else{Animated.spring(checkScale,{toValue:0,useNativeDriver:true}).start();}},[checked,checkScale,showSelectedCheck]);var roundness=theme.roundness,isV3=theme.isV3;var _getSegmentedButtonCo=getSegmentedButtonColors({checked:checked,theme:theme,disabled:disabled}),borderColor=_getSegmentedButtonCo.borderColor,textColor=_getSegmentedButtonCo.textColor,borderWidth=_getSegmentedButtonCo.borderWidth,backgroundColor=_getSegmentedButtonCo.backgroundColor;var borderRadius=(isV3?5:1)*roundness;var segmentBorderRadius=getSegmentedButtonBorderRadius({theme:theme,segment:segment});var rippleColor=color(textColor).alpha(0.12).rgb().string();var showIcon=!icon?false:label&&checked?!showSelectedCheck:true;var showCheckedIcon=checked&&showSelectedCheck;var iconSize=isV3?18:16;var iconStyle=_objectSpread({marginRight:label?5:showCheckedIcon?3:0},label&&{transform:[{scale:checkScale.interpolate({inputRange:[0,1],outputRange:[1,0]})}]});var buttonStyle=_objectSpread({backgroundColor:backgroundColor,borderColor:borderColor,borderWidth:borderWidth,borderRadius:borderRadius},segmentBorderRadius);var paddingVertical=getSegmentedButtonDensityPadding({density:density});var rippleStyle=_objectSpread({borderRadius:borderRadius},segmentBorderRadius);var labelTextStyle=_objectSpread(_objectSpread({},!isV3?{textTransform:'uppercase',fontWeight:'500'}:theme.fonts.labelLarge),{},{color:textColor});return React.createElement(View,{style:[buttonStyle,styles.button,style]},React.createElement(TouchableRipple,{borderless:true,onPress:onPress,accessibilityLabel:accessibilityLabel,accessibilityState:{disabled:disabled,checked:checked},accessibilityRole:\"button\",disabled:disabled,rippleColor:rippleColor,testID:testID,style:rippleStyle,theme:theme},React.createElement(View,{style:[styles.content,{paddingVertical:paddingVertical}]},showCheckedIcon?React.createElement(Animated.View,{testID:testID+\"-check-icon\",style:[iconStyle,{transform:[{scale:checkScale}]}]},React.createElement(Icon,{source:'check',size:iconSize})):null,showIcon?React.createElement(Animated.View,{testID:testID+\"-icon\",style:iconStyle},React.createElement(Icon,{source:icon,size:iconSize,color:disabled?textColor:undefined})):null,React.createElement(Text,{variant:\"labelLarge\",style:[styles.label,labelTextStyle],selectable:false,numberOfLines:1},label))));};var styles=StyleSheet.create({button:{flex:1,minWidth:76,borderStyle:'solid'},label:{textAlign:'center'},content:{flexDirection:'row',alignItems:'center',justifyContent:'center',paddingVertical:9,paddingHorizontal:16}});export default SegmentedButtonItem;export{SegmentedButtonItem as SegmentedButton};","map":{"version":3,"sources":["SegmentedButtonItem.tsx"],"names":["React","color","useInternalTheme","Icon","TouchableRipple","Text","getSegmentedButtonBorderRadius","getSegmentedButtonColors","getSegmentedButtonDensityPadding","SegmentedButtonItem","checked","accessibilityLabel","disabled","style","showSelectedCheck","icon","testID","label","onPress","segment","density","theme","themeOverrides","checkScale","useRef","Animated","Value","current","useEffect","spring","toValue","useNativeDriver","start","roundness","isV3","borderColor","textColor","borderWidth","backgroundColor","borderRadius","segmentBorderRadius","rippleColor","alpha","rgb","string","showIcon","showCheckedIcon","iconSize","iconStyle","marginRight","transform","scale","interpolate","inputRange","outputRange","buttonStyle","paddingVertical","rippleStyle","labelTextStyle","textTransform","fontWeight","fonts","labelLarge","styles","button","content","undefined","StyleSheet","create","flex","minWidth","borderStyle","textAlign","flexDirection","alignItems","justifyContent","paddingHorizontal","SegmentedButton"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport { useInternalTheme } from '../../core/theming';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { getSegmentedButtonBorderRadius, getSegmentedButtonColors, getSegmentedButtonDensityPadding } from './utils';\nconst SegmentedButtonItem = _ref => {\n  let {\n    checked,\n    accessibilityLabel,\n    disabled,\n    style,\n    showSelectedCheck,\n    icon,\n    testID,\n    label,\n    onPress,\n    segment,\n    density = 'regular',\n    theme: themeOverrides\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const checkScale = React.useRef(new Animated.Value(0)).current;\n  React.useEffect(() => {\n    if (!showSelectedCheck) {\n      return;\n    }\n    if (checked) {\n      Animated.spring(checkScale, {\n        toValue: 1,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.spring(checkScale, {\n        toValue: 0,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [checked, checkScale, showSelectedCheck]);\n  const {\n    roundness,\n    isV3\n  } = theme;\n  const {\n    borderColor,\n    textColor,\n    borderWidth,\n    backgroundColor\n  } = getSegmentedButtonColors({\n    checked,\n    theme,\n    disabled\n  });\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const segmentBorderRadius = getSegmentedButtonBorderRadius({\n    theme,\n    segment\n  });\n  const rippleColor = color(textColor).alpha(0.12).rgb().string();\n  const showIcon = !icon ? false : label && checked ? !showSelectedCheck : true;\n  const showCheckedIcon = checked && showSelectedCheck;\n  const iconSize = isV3 ? 18 : 16;\n  const iconStyle = {\n    marginRight: label ? 5 : showCheckedIcon ? 3 : 0,\n    ...(label && {\n      transform: [{\n        scale: checkScale.interpolate({\n          inputRange: [0, 1],\n          outputRange: [1, 0]\n        })\n      }]\n    })\n  };\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius,\n    ...segmentBorderRadius\n  };\n  const paddingVertical = getSegmentedButtonDensityPadding({\n    density\n  });\n  const rippleStyle = {\n    borderRadius,\n    ...segmentBorderRadius\n  };\n  const labelTextStyle = {\n    ...(!isV3 ? {\n      textTransform: 'uppercase',\n      fontWeight: '500'\n    } : theme.fonts.labelLarge),\n    color: textColor\n  };\n  return /*#__PURE__*/React.createElement(View, {\n    style: [buttonStyle, styles.button, style]\n  }, /*#__PURE__*/React.createElement(TouchableRipple, {\n    borderless: true,\n    onPress: onPress,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityState: {\n      disabled,\n      checked\n    },\n    accessibilityRole: \"button\",\n    disabled: disabled,\n    rippleColor: rippleColor,\n    testID: testID,\n    style: rippleStyle,\n    theme: theme\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.content, {\n      paddingVertical\n    }]\n  }, showCheckedIcon ? /*#__PURE__*/React.createElement(Animated.View, {\n    testID: `${testID}-check-icon`,\n    style: [iconStyle, {\n      transform: [{\n        scale: checkScale\n      }]\n    }]\n  }, /*#__PURE__*/React.createElement(Icon, {\n    source: 'check',\n    size: iconSize\n  })) : null, showIcon ? /*#__PURE__*/React.createElement(Animated.View, {\n    testID: `${testID}-icon`,\n    style: iconStyle\n  }, /*#__PURE__*/React.createElement(Icon, {\n    source: icon,\n    size: iconSize,\n    color: disabled ? textColor : undefined\n  })) : null, /*#__PURE__*/React.createElement(Text, {\n    variant: \"labelLarge\",\n    style: [styles.label, labelTextStyle],\n    selectable: false,\n    numberOfLines: 1\n  }, label))));\n};\nconst styles = StyleSheet.create({\n  button: {\n    flex: 1,\n    minWidth: 76,\n    borderStyle: 'solid'\n  },\n  label: {\n    textAlign: 'center'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 9,\n    paddingHorizontal: 16\n  }\n});\nexport default SegmentedButtonItem;\nexport { SegmentedButtonItem as SegmentedButton };\n//# sourceMappingURL=SegmentedButtonItem.js.map"]},"metadata":{},"sourceType":"module"}