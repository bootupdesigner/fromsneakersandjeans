{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _OrientationLockAPITo, _OrientationWebToAPI;\nimport { SyntheticPlatformEmitter, Platform } from 'expo-modules-core';\nimport { getOrientationLockAsync, getOrientationAsync } from \"./ScreenOrientation\";\nimport { Orientation, OrientationLock, WebOrientationLock, WebOrientation } from \"./ScreenOrientation.types\";\nvar OrientationLockAPIToWeb = (_OrientationLockAPITo = {}, _defineProperty(_OrientationLockAPITo, OrientationLock.DEFAULT, WebOrientationLock.NATURAL), _defineProperty(_OrientationLockAPITo, OrientationLock.ALL, WebOrientationLock.ANY), _defineProperty(_OrientationLockAPITo, OrientationLock.PORTRAIT, WebOrientationLock.PORTRAIT), _defineProperty(_OrientationLockAPITo, OrientationLock.PORTRAIT_UP, WebOrientationLock.PORTRAIT_PRIMARY), _defineProperty(_OrientationLockAPITo, OrientationLock.PORTRAIT_DOWN, WebOrientationLock.PORTRAIT_SECONDARY), _defineProperty(_OrientationLockAPITo, OrientationLock.LANDSCAPE, WebOrientationLock.LANDSCAPE), _defineProperty(_OrientationLockAPITo, OrientationLock.LANDSCAPE_LEFT, WebOrientationLock.LANDSCAPE_PRIMARY), _defineProperty(_OrientationLockAPITo, OrientationLock.LANDSCAPE_RIGHT, WebOrientationLock.LANDSCAPE_SECONDARY), _OrientationLockAPITo);\nvar OrientationWebToAPI = (_OrientationWebToAPI = {}, _defineProperty(_OrientationWebToAPI, WebOrientation.PORTRAIT_PRIMARY, Orientation.PORTRAIT_UP), _defineProperty(_OrientationWebToAPI, WebOrientation.PORTRAIT_SECONDARY, Orientation.PORTRAIT_DOWN), _defineProperty(_OrientationWebToAPI, WebOrientation.LANDSCAPE_PRIMARY, Orientation.LANDSCAPE_LEFT), _defineProperty(_OrientationWebToAPI, WebOrientation.LANDSCAPE_SECONDARY, Orientation.LANDSCAPE_RIGHT), _OrientationWebToAPI);\nvar screen = Platform.canUseViewport ? window.screen : {};\nvar orientation = Platform.canUseViewport ? screen.orientation || screen.msOrientation || null : null;\nfunction emitOrientationEvent() {\n  return _emitOrientationEvent.apply(this, arguments);\n}\nfunction _emitOrientationEvent() {\n  _emitOrientationEvent = _asyncToGenerator(function* () {\n    var _yield$Promise$all = yield Promise.all([getOrientationLockAsync(), getOrientationAsync()]),\n      _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2),\n      orientationLock = _yield$Promise$all2[0],\n      orientation = _yield$Promise$all2[1];\n    SyntheticPlatformEmitter.emit('expoDidUpdateDimensions', {\n      orientationLock: orientationLock,\n      orientationInfo: {\n        orientation: orientation\n      }\n    });\n  });\n  return _emitOrientationEvent.apply(this, arguments);\n}\nif (Platform.canUseEventListeners) {\n  if (orientation && orientation.addEventListener) {\n    orientation.addEventListener('change', emitOrientationEvent);\n  } else {\n    window.addEventListener('orientationchange', emitOrientationEvent);\n  }\n}\nfunction _convertToLegacyOrientationLock(orientationLock) {\n  switch (orientationLock) {\n    case WebOrientationLock.UNKNOWN:\n      throw new Error(\"expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock to be converted.\");\n    case WebOrientationLock.ANY:\n      return ['portrait', 'landscape'];\n    case WebOrientationLock.NATURAL:\n      return 'default';\n    default:\n      return orientationLock;\n  }\n}\nfunction _lockAsync(_x) {\n  return _lockAsync2.apply(this, arguments);\n}\nfunction _lockAsync2() {\n  _lockAsync2 = _asyncToGenerator(function* (webOrientationLock) {\n    if (webOrientationLock === WebOrientationLock.UNKNOWN) {\n      throw new Error(\"expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock that can be applied to the device.\");\n    }\n    if (screen.orientation && screen.orientation.lock) {\n      yield screen.orientation.lock(webOrientationLock);\n    } else if (screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation']) {\n      var legacyLock = _convertToLegacyOrientationLock(webOrientationLock);\n      var lockOrientation = screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation'];\n      var isSuccess = lockOrientation.call(screen, legacyLock);\n      if (!isSuccess) {\n        throw new Error(\"Applying orientation lock: \" + JSON.stringify(webOrientationLock) + \" to device was denied\");\n      }\n    } else {\n      throw new Error(\"expo-screen-orientation: The browser doesn't support locking screen orientation.\");\n    }\n  });\n  return _lockAsync2.apply(this, arguments);\n}\nvar _lastWebOrientationLock = WebOrientationLock.UNKNOWN;\nexport default {\n  get name() {\n    return 'ExpoScreenOrientation';\n  },\n  supportsOrientationLockAsync: function () {\n    var _supportsOrientationLockAsync = _asyncToGenerator(function* (orientationLock) {\n      return orientationLock in OrientationLockAPIToWeb;\n    });\n    function supportsOrientationLockAsync(_x2) {\n      return _supportsOrientationLockAsync.apply(this, arguments);\n    }\n    return supportsOrientationLockAsync;\n  }(),\n  getPlatformOrientationLockAsync: function () {\n    var _getPlatformOrientationLockAsync = _asyncToGenerator(function* () {\n      return _lastWebOrientationLock;\n    });\n    function getPlatformOrientationLockAsync() {\n      return _getPlatformOrientationLockAsync.apply(this, arguments);\n    }\n    return getPlatformOrientationLockAsync;\n  }(),\n  getOrientationAsync: function () {\n    var _getOrientationAsync = _asyncToGenerator(function* () {\n      var webOrientation = screen['msOrientation'] || (screen.orientation || screen['mozOrientation'] || {}).type;\n      if (!webOrientation) {\n        return Orientation.UNKNOWN;\n      }\n      return OrientationWebToAPI[webOrientation];\n    });\n    function getOrientationAsync() {\n      return _getOrientationAsync.apply(this, arguments);\n    }\n    return getOrientationAsync;\n  }(),\n  lockAsync: function () {\n    var _lockAsync3 = _asyncToGenerator(function* (orientationLock) {\n      var webOrientationLock = OrientationLockAPIToWeb[orientationLock];\n      if (!webOrientationLock) {\n        throw new TypeError(\"Invalid Orientation Lock: \" + orientationLock);\n      }\n      yield _lockAsync(webOrientationLock);\n    });\n    function lockAsync(_x3) {\n      return _lockAsync3.apply(this, arguments);\n    }\n    return lockAsync;\n  }(),\n  lockPlatformAsync: function () {\n    var _lockPlatformAsync = _asyncToGenerator(function* (webOrientationLock) {\n      yield _lockAsync(webOrientationLock);\n      _lastWebOrientationLock = webOrientationLock;\n    });\n    function lockPlatformAsync(_x4) {\n      return _lockPlatformAsync.apply(this, arguments);\n    }\n    return lockPlatformAsync;\n  }(),\n  unlockAsync: function () {\n    var _unlockAsync = _asyncToGenerator(function* () {\n      if (screen.orientation && screen.orientation.unlock) {\n        screen.orientation.unlock();\n      } else if (screen['unlockOrientation'] || screen['mozUnlockOrientation'] || screen['msUnlockOrientation']) {\n        var unlockOrientation = screen['unlockOrientation'] || screen['mozUnlockOrientation'] || screen['msUnlockOrientation'];\n        var isSuccess = unlockOrientation.call(screen);\n        if (!isSuccess) {\n          throw new Error(\"Unlocking screen orientation on device was denied\");\n        }\n      } else {\n        throw new Error(\"expo-screen-orientation: The browser doesn't support unlocking screen orientation.\");\n      }\n    });\n    function unlockAsync() {\n      return _unlockAsync.apply(this, arguments);\n    }\n    return unlockAsync;\n  }()\n};","map":{"version":3,"sources":["../src/ExpoScreenOrientation.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { SyntheticPlatformEmitter, Platform } from 'expo-modules-core';\n\nimport { getOrientationLockAsync, getOrientationAsync } from './ScreenOrientation';\nimport {\n  Orientation,\n  OrientationLock,\n  WebOrientationLock,\n  WebOrientation,\n} from './ScreenOrientation.types';\n\nconst OrientationLockAPIToWeb: {\n  [lock: string]: WebOrientationLock;\n} = {\n  [OrientationLock.DEFAULT]: WebOrientationLock.NATURAL,\n  [OrientationLock.ALL]: WebOrientationLock.ANY,\n  [OrientationLock.PORTRAIT]: WebOrientationLock.PORTRAIT,\n  [OrientationLock.PORTRAIT_UP]: WebOrientationLock.PORTRAIT_PRIMARY,\n  [OrientationLock.PORTRAIT_DOWN]: WebOrientationLock.PORTRAIT_SECONDARY,\n  [OrientationLock.LANDSCAPE]: WebOrientationLock.LANDSCAPE,\n  [OrientationLock.LANDSCAPE_LEFT]: WebOrientationLock.LANDSCAPE_PRIMARY,\n  [OrientationLock.LANDSCAPE_RIGHT]: WebOrientationLock.LANDSCAPE_SECONDARY,\n};\n\nconst OrientationWebToAPI: {\n  [orientationWeb: string]: Orientation;\n} = {\n  [WebOrientation.PORTRAIT_PRIMARY]: Orientation.PORTRAIT_UP,\n  [WebOrientation.PORTRAIT_SECONDARY]: Orientation.PORTRAIT_DOWN,\n  [WebOrientation.LANDSCAPE_PRIMARY]: Orientation.LANDSCAPE_LEFT,\n  [WebOrientation.LANDSCAPE_SECONDARY]: Orientation.LANDSCAPE_RIGHT,\n};\n\ndeclare const window: Window;\n\nconst screen: Screen = Platform.canUseViewport ? window.screen : ({} as Screen);\nconst orientation: ScreenOrientation | null = Platform.canUseViewport\n  ? screen.orientation || (screen as any).msOrientation || null\n  : null;\n\nasync function emitOrientationEvent() {\n  const [orientationLock, orientation] = await Promise.all([\n    getOrientationLockAsync(),\n    getOrientationAsync(),\n  ]);\n  SyntheticPlatformEmitter.emit('expoDidUpdateDimensions', {\n    orientationLock,\n    orientationInfo: { orientation },\n  });\n}\n\nif (Platform.canUseEventListeners) {\n  if (orientation && orientation.addEventListener) {\n    orientation.addEventListener('change', emitOrientationEvent);\n  } else {\n    window.addEventListener('orientationchange', emitOrientationEvent);\n  }\n}\n\nfunction _convertToLegacyOrientationLock(orientationLock: WebOrientationLock): string | string[] {\n  switch (orientationLock) {\n    case WebOrientationLock.UNKNOWN:\n      throw new Error(\n        `expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock to be converted.`\n      );\n    case WebOrientationLock.ANY:\n      return ['portrait', 'landscape'];\n    case WebOrientationLock.NATURAL:\n      return 'default';\n    default:\n      return orientationLock;\n  }\n}\n\nasync function _lockAsync(webOrientationLock: WebOrientationLock): Promise<void> {\n  if (webOrientationLock === WebOrientationLock.UNKNOWN) {\n    throw new Error(\n      `expo-screen-orientation: WebOrientationLock.UNKNOWN is not a valid lock that can be applied to the device.`\n    );\n  }\n  if (screen.orientation && screen.orientation.lock) {\n    await screen.orientation.lock(webOrientationLock);\n  } else if (\n    screen['lockOrientation'] ||\n    screen['mozLockOrientation'] ||\n    screen['msLockOrientation']\n  ) {\n    const legacyLock = _convertToLegacyOrientationLock(webOrientationLock);\n    const lockOrientation =\n      screen['lockOrientation'] || screen['mozLockOrientation'] || screen['msLockOrientation'];\n    // correct `this` context must be passed in otherwise method call is disallowed by browser\n    const isSuccess = lockOrientation.call(screen, legacyLock);\n    if (!isSuccess) {\n      throw new Error(\n        `Applying orientation lock: ${JSON.stringify(webOrientationLock)} to device was denied`\n      );\n    }\n  } else {\n    throw new Error(\n      `expo-screen-orientation: The browser doesn't support locking screen orientation.`\n    );\n  }\n}\n\nlet _lastWebOrientationLock: WebOrientationLock = WebOrientationLock.UNKNOWN;\n\nexport default {\n  get name(): string {\n    return 'ExpoScreenOrientation';\n  },\n  async supportsOrientationLockAsync(orientationLock: OrientationLock): Promise<boolean> {\n    return orientationLock in OrientationLockAPIToWeb;\n  },\n  async getPlatformOrientationLockAsync(): Promise<WebOrientationLock> {\n    return _lastWebOrientationLock;\n  },\n  async getOrientationAsync(): Promise<Orientation> {\n    const webOrientation =\n      screen['msOrientation'] || (screen.orientation || screen['mozOrientation'] || {}).type;\n    if (!webOrientation) {\n      return Orientation.UNKNOWN;\n    }\n    return OrientationWebToAPI[webOrientation];\n  },\n  async lockAsync(orientationLock: OrientationLock): Promise<void> {\n    const webOrientationLock = OrientationLockAPIToWeb[orientationLock];\n    if (!webOrientationLock) {\n      throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n    }\n    await _lockAsync(webOrientationLock);\n  },\n  async lockPlatformAsync(webOrientationLock: WebOrientationLock): Promise<void> {\n    await _lockAsync(webOrientationLock);\n    _lastWebOrientationLock = webOrientationLock;\n  },\n  async unlockAsync(): Promise<void> {\n    if (screen.orientation && screen.orientation.unlock) {\n      screen.orientation.unlock();\n    } else if (\n      screen['unlockOrientation'] ||\n      screen['mozUnlockOrientation'] ||\n      screen['msUnlockOrientation']\n    ) {\n      const unlockOrientation =\n        screen['unlockOrientation'] ||\n        screen['mozUnlockOrientation'] ||\n        screen['msUnlockOrientation'];\n      // correct `this` context must be passed in otherwise method call is disallowed by browser\n      const isSuccess = unlockOrientation.call(screen);\n      if (!isSuccess) {\n        throw new Error(`Unlocking screen orientation on device was denied`);\n      }\n    } else {\n      throw new Error(\n        `expo-screen-orientation: The browser doesn't support unlocking screen orientation.`\n      );\n    }\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}