{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { EventEmitter, Platform, UnavailabilityError } from 'expo-modules-core';\nimport ExpoScreenOrientation from \"./ExpoScreenOrientation\";\nimport { Orientation, OrientationLock, WebOrientationLock, WebOrientation, SizeClassIOS } from \"./ScreenOrientation.types\";\nexport { Orientation, OrientationLock, WebOrientationLock, WebOrientation, SizeClassIOS };\nvar _orientationChangeEmitter = new EventEmitter(ExpoScreenOrientation);\nvar _orientationChangeSubscribers = [];\nvar _lastOrientationLock = OrientationLock.UNKNOWN;\nexport function lockAsync(_x) {\n  return _lockAsync.apply(this, arguments);\n}\nfunction _lockAsync() {\n  _lockAsync = _asyncToGenerator(function* (orientationLock) {\n    if (!ExpoScreenOrientation.lockAsync) {\n      throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n    }\n    var orientationLocks = Object.values(OrientationLock);\n    if (!orientationLocks.includes(orientationLock)) {\n      throw new TypeError(\"Invalid Orientation Lock: \" + orientationLock);\n    }\n    if (orientationLock === OrientationLock.OTHER) {\n      return;\n    }\n    yield ExpoScreenOrientation.lockAsync(orientationLock);\n    _lastOrientationLock = orientationLock;\n  });\n  return _lockAsync.apply(this, arguments);\n}\nexport function lockPlatformAsync(_x2) {\n  return _lockPlatformAsync.apply(this, arguments);\n}\nfunction _lockPlatformAsync() {\n  _lockPlatformAsync = _asyncToGenerator(function* (options) {\n    if (!ExpoScreenOrientation.lockPlatformAsync) {\n      throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n    }\n    var screenOrientationConstantAndroid = options.screenOrientationConstantAndroid,\n      screenOrientationArrayIOS = options.screenOrientationArrayIOS,\n      screenOrientationLockWeb = options.screenOrientationLockWeb;\n    var platformOrientationParam;\n    if (Platform.OS === 'android' && screenOrientationConstantAndroid) {\n      if (isNaN(screenOrientationConstantAndroid)) {\n        throw new TypeError(\"lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with \" + screenOrientationConstantAndroid);\n      }\n      platformOrientationParam = screenOrientationConstantAndroid;\n    } else if (Platform.OS === 'ios' && screenOrientationArrayIOS) {\n      if (!Array.isArray(screenOrientationArrayIOS)) {\n        throw new TypeError(\"lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with \" + screenOrientationArrayIOS);\n      }\n      var orientations = Object.values(Orientation);\n      for (var orientation of screenOrientationArrayIOS) {\n        if (!orientations.includes(orientation)) {\n          throw new TypeError(\"lockPlatformAsync iOS platform: \" + orientation + \" is not a valid Orientation\");\n        }\n      }\n      platformOrientationParam = screenOrientationArrayIOS;\n    } else if (Platform.OS === 'web' && screenOrientationLockWeb) {\n      var webOrientationLocks = Object.values(WebOrientationLock);\n      if (!webOrientationLocks.includes(screenOrientationLockWeb)) {\n        throw new TypeError(\"Invalid Web Orientation Lock: \" + screenOrientationLockWeb);\n      }\n      platformOrientationParam = screenOrientationLockWeb;\n    }\n    if (!platformOrientationParam) {\n      throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n    }\n    yield ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);\n    _lastOrientationLock = OrientationLock.OTHER;\n  });\n  return _lockPlatformAsync.apply(this, arguments);\n}\nexport function unlockAsync() {\n  return _unlockAsync.apply(this, arguments);\n}\nfunction _unlockAsync() {\n  _unlockAsync = _asyncToGenerator(function* () {\n    if (!ExpoScreenOrientation.lockAsync) {\n      throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n    }\n    yield ExpoScreenOrientation.lockAsync(OrientationLock.DEFAULT);\n  });\n  return _unlockAsync.apply(this, arguments);\n}\nexport function getOrientationAsync() {\n  return _getOrientationAsync.apply(this, arguments);\n}\nfunction _getOrientationAsync() {\n  _getOrientationAsync = _asyncToGenerator(function* () {\n    if (!ExpoScreenOrientation.getOrientationAsync) {\n      throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n    }\n    return yield ExpoScreenOrientation.getOrientationAsync();\n  });\n  return _getOrientationAsync.apply(this, arguments);\n}\nexport function getOrientationLockAsync() {\n  return _getOrientationLockAsync.apply(this, arguments);\n}\nfunction _getOrientationLockAsync() {\n  _getOrientationLockAsync = _asyncToGenerator(function* () {\n    if (!ExpoScreenOrientation.getOrientationLockAsync) {\n      return _lastOrientationLock;\n    }\n    return yield ExpoScreenOrientation.getOrientationLockAsync();\n  });\n  return _getOrientationLockAsync.apply(this, arguments);\n}\nexport function getPlatformOrientationLockAsync() {\n  return _getPlatformOrientationLockAsync.apply(this, arguments);\n}\nfunction _getPlatformOrientationLockAsync() {\n  _getPlatformOrientationLockAsync = _asyncToGenerator(function* () {\n    var platformOrientationLock = yield ExpoScreenOrientation.getPlatformOrientationLockAsync();\n    if (Platform.OS === 'android') {\n      return {\n        screenOrientationConstantAndroid: platformOrientationLock\n      };\n    } else if (Platform.OS === 'ios') {\n      return {\n        screenOrientationArrayIOS: platformOrientationLock\n      };\n    } else if (Platform.OS === 'web') {\n      return {\n        screenOrientationLockWeb: platformOrientationLock\n      };\n    } else {\n      return {};\n    }\n  });\n  return _getPlatformOrientationLockAsync.apply(this, arguments);\n}\nexport function supportsOrientationLockAsync(_x3) {\n  return _supportsOrientationLockAsync.apply(this, arguments);\n}\nfunction _supportsOrientationLockAsync() {\n  _supportsOrientationLockAsync = _asyncToGenerator(function* (orientationLock) {\n    if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n      throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n    }\n    var orientationLocks = Object.values(OrientationLock);\n    if (!orientationLocks.includes(orientationLock)) {\n      throw new TypeError(\"Invalid Orientation Lock: \" + orientationLock);\n    }\n    return yield ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n  });\n  return _supportsOrientationLockAsync.apply(this, arguments);\n}\nfunction getEventName() {\n  return Platform.OS === 'ios' || Platform.OS === 'web' ? 'expoDidUpdateDimensions' : 'didUpdateDimensions';\n}\nexport function addOrientationChangeListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError(\"addOrientationChangeListener cannot be called with \" + listener);\n  }\n  var subscription = _orientationChangeEmitter.addListener(getEventName(), function () {\n    var _ref = _asyncToGenerator(function* (update) {\n      var orientationInfo, orientationLock;\n      if (Platform.OS === 'ios' || Platform.OS === 'web') {\n        orientationLock = update.orientationLock;\n        orientationInfo = update.orientationInfo;\n      } else {\n        var orientation;\n        var _yield$Promise$all = yield Promise.all([getOrientationLockAsync(), getOrientationAsync()]);\n        var _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n        orientationLock = _yield$Promise$all2[0];\n        orientation = _yield$Promise$all2[1];\n        orientationInfo = {\n          orientation: orientation\n        };\n      }\n      listener({\n        orientationInfo: orientationInfo,\n        orientationLock: orientationLock\n      });\n    });\n    return function (_x4) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  _orientationChangeSubscribers.push(subscription);\n  return subscription;\n}\nexport function removeOrientationChangeListeners() {\n  var i = _orientationChangeSubscribers.length;\n  while (i--) {\n    var subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n    _orientationChangeSubscribers.pop();\n  }\n}\nexport function removeOrientationChangeListener(subscription) {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(\"Must pass in a valid subscription\");\n  }\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(function (sub) {\n    return sub !== subscription;\n  });\n}","map":{"version":3,"sources":["../src/ScreenOrientation.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Platform, Subscription, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoScreenOrientation from './ExpoScreenOrientation';\nimport {\n  Orientation,\n  OrientationChangeEvent,\n  OrientationChangeListener,\n  OrientationLock,\n  PlatformOrientationInfo,\n  WebOrientationLock,\n  WebOrientation,\n  SizeClassIOS,\n  ScreenOrientationInfo,\n} from './ScreenOrientation.types';\n\nexport {\n  Orientation,\n  OrientationLock,\n  PlatformOrientationInfo,\n  OrientationChangeListener,\n  OrientationChangeEvent,\n  WebOrientationLock,\n  WebOrientation,\n  SizeClassIOS,\n  ScreenOrientationInfo,\n  Subscription,\n};\n\nconst _orientationChangeEmitter = new EventEmitter(ExpoScreenOrientation);\nlet _orientationChangeSubscribers: Subscription[] = [];\n\nlet _lastOrientationLock: OrientationLock = OrientationLock.UNKNOWN;\n\n// @needsAudit\n/**\n * Lock the screen orientation to a particular `OrientationLock`.\n * @param orientationLock The orientation lock to apply. See the [`OrientationLock`](#orientationlock)\n * enum for possible values.\n * @return Returns a promise with `void` value, which fulfils when the orientation is set.\n *\n * # Error codes\n * - `ERR_SCREEN_ORIENTATION_INVALID_ORIENTATION_LOCK` - An invalid [`OrientationLock`](#orientationlock)\n *   was passed in.\n * - `ERR_SCREEN_ORIENTATION_UNSUPPORTED_ORIENTATION_LOCK` - The platform does not support the\n *   orientation lock policy.\n * - `ERR_SCREEN_ORIENTATION_MISSING_ACTIVITY` - __Android Only.__ Could not get the current activity.\n *\n * @example\n * ```ts\n * async function changeScreenOrientation() {\n *   await ScreenOrientation.lockAsync(ScreenOrientation.OrientationLock.LANDSCAPE_LEFT);\n * }\n * ```\n */\nexport async function lockAsync(orientationLock: OrientationLock): Promise<void> {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  if (orientationLock === OrientationLock.OTHER) {\n    return;\n  }\n\n  await ExpoScreenOrientation.lockAsync(orientationLock);\n  _lastOrientationLock = orientationLock;\n}\n\n// @needsAudit @docsMissing\n/**\n * @param options The platform specific lock to apply. See the [`PlatformOrientationInfo`](#platformorientationinfo)\n * object type for the different platform formats.\n * @return Returns a promise with `void` value, resolving when the orientation is set and rejecting\n * if an invalid option or value is passed.\n *\n * # Error codes\n * - `ERR_SCREEN_ORIENTATION_INVALID_ORIENTATION_LOCK` - __iOS Only.__ An invalid [`OrientationLock`](#orientationlock)\n *   was passed in.\n * - `ERR_SCREEN_ORIENTATION_UNSUPPORTED_ORIENTATION_LOCK` - The platform does not support the\n *   orientation lock policy.\n * - `ERR_SCREEN_ORIENTATION_MISSING_ACTIVITY` - __Android Only.__ Could not get the current activity.\n *\n */\nexport async function lockPlatformAsync(options: PlatformOrientationInfo): Promise<void> {\n  if (!ExpoScreenOrientation.lockPlatformAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n  }\n\n  const { screenOrientationConstantAndroid, screenOrientationArrayIOS, screenOrientationLockWeb } =\n    options;\n  let platformOrientationParam: any;\n  if (Platform.OS === 'android' && screenOrientationConstantAndroid) {\n    if (isNaN(screenOrientationConstantAndroid)) {\n      throw new TypeError(\n        `lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with ${screenOrientationConstantAndroid}`\n      );\n    }\n    platformOrientationParam = screenOrientationConstantAndroid;\n  } else if (Platform.OS === 'ios' && screenOrientationArrayIOS) {\n    if (!Array.isArray(screenOrientationArrayIOS)) {\n      throw new TypeError(\n        `lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with ${screenOrientationArrayIOS}`\n      );\n    }\n\n    const orientations = Object.values(Orientation);\n    for (const orientation of screenOrientationArrayIOS) {\n      if (!orientations.includes(orientation)) {\n        throw new TypeError(\n          `lockPlatformAsync iOS platform: ${orientation} is not a valid Orientation`\n        );\n      }\n    }\n    platformOrientationParam = screenOrientationArrayIOS;\n  } else if (Platform.OS === 'web' && screenOrientationLockWeb) {\n    const webOrientationLocks = Object.values(WebOrientationLock);\n    if (!webOrientationLocks.includes(screenOrientationLockWeb)) {\n      throw new TypeError(`Invalid Web Orientation Lock: ${screenOrientationLockWeb}`);\n    }\n    platformOrientationParam = screenOrientationLockWeb;\n  }\n\n  if (!platformOrientationParam) {\n    throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n  }\n  await ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);\n  _lastOrientationLock = OrientationLock.OTHER;\n}\n\n// @needsAudit\n/**\n * Sets the screen orientation back to the `OrientationLock.DEFAULT` policy.\n * @return Returns a promise with `void` value, which fulfils when the orientation is set.\n *\n * # Error codes\n * - `ERR_SCREEN_ORIENTATION_MISSING_ACTIVITY` - __Android Only.__ Could not get the current activity.\n */\nexport async function unlockAsync(): Promise<void> {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n  await ExpoScreenOrientation.lockAsync(OrientationLock.DEFAULT);\n}\n\n// @needsAudit\n/**\n * Gets the current screen orientation.\n * @return Returns a promise that fulfils with an [`Orientation`](#screenorientationorientation)\n * value that reflects the current screen orientation.\n *\n * # Error codes\n * - `ERR_SCREEN_ORIENTATION_GET_ORIENTATION_LOCK` - __Android Only.__ An unknown error occurred\n *   when trying to get the system lock.\n * - `ERR_SCREEN_ORIENTATION_MISSING_ACTIVITY` - __Android Only.__ Could not get the current activity.\n */\nexport async function getOrientationAsync(): Promise<Orientation> {\n  if (!ExpoScreenOrientation.getOrientationAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n  }\n  return await ExpoScreenOrientation.getOrientationAsync();\n}\n\n// @needsAudit\n/**\n * Gets the current screen orientation lock type.\n * @return Returns a promise which fulfils with an [`OrientationLock`](#orientationlock)\n * value.\n *\n * # Error codes\n * - `ERR_SCREEN_ORIENTATION_MISSING_ACTIVITY` - __Android Only.__ Could not get the current activity.\n */\nexport async function getOrientationLockAsync(): Promise<OrientationLock> {\n  if (!ExpoScreenOrientation.getOrientationLockAsync) {\n    return _lastOrientationLock;\n  }\n  return await ExpoScreenOrientation.getOrientationLockAsync();\n}\n\n// @needsAudit\n/**\n * Gets the platform specific screen orientation lock type.\n * @return Returns a promise which fulfils with a [`PlatformOrientationInfo`](#platformorientationinfo)\n * value.\n *\n * # Error codes\n * - `ERR_SCREEN_ORIENTATION_GET_PLATFORM_ORIENTATION_LOCK`\n * - `ERR_SCREEN_ORIENTATION_MISSING_ACTIVITY` - __Android Only.__ Could not get the current activity.\n */\nexport async function getPlatformOrientationLockAsync(): Promise<PlatformOrientationInfo> {\n  const platformOrientationLock = await ExpoScreenOrientation.getPlatformOrientationLockAsync();\n  if (Platform.OS === 'android') {\n    return {\n      screenOrientationConstantAndroid: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'ios') {\n    return {\n      screenOrientationArrayIOS: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'web') {\n    return {\n      screenOrientationLockWeb: platformOrientationLock,\n    };\n  } else {\n    return {};\n  }\n}\n\n// @needsAudit @docsMissing\n/**\n * Returns whether the [`OrientationLock`](#orientationlock) policy is supported on\n * the device.\n * @param orientationLock\n * @return Returns a promise that resolves to a `boolean` value that reflects whether or not the\n * orientationLock is supported.\n */\nexport async function supportsOrientationLockAsync(\n  orientationLock: OrientationLock\n): Promise<boolean> {\n  if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  return await ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n}\n\n// Determine the event name lazily so Jest can set up mocks in advance\nfunction getEventName(): string {\n  return Platform.OS === 'ios' || Platform.OS === 'web'\n    ? 'expoDidUpdateDimensions'\n    : 'didUpdateDimensions';\n}\n\n// We rely on RN to emit `didUpdateDimensions`\n// If this method no longer works, it's possible that the underlying RN implementation has changed\n// see https://github.com/facebook/react-native/blob/c31f79fe478b882540d7fd31ee37b53ddbd60a17/ReactAndroid/src/main/java/com/facebook/react/modules/deviceinfo/DeviceInfoModule.java#L90\n// @needsAudit\n/**\n * Invokes the `listener` function when the screen orientation changes from `portrait` to `landscape`\n * or from `landscape` to `portrait`. For example, it won't be invoked when screen orientation\n * change from `portrait up` to `portrait down`, but it will be called when there was a change from\n * `portrait up` to `landscape left`.\n * @param listener Each orientation update will pass an object with the new [`OrientationChangeEvent`](#orientationchangeevent)\n * to the listener.\n */\nexport function addOrientationChangeListener(listener: OrientationChangeListener): Subscription {\n  if (typeof listener !== 'function') {\n    throw new TypeError(`addOrientationChangeListener cannot be called with ${listener}`);\n  }\n  const subscription = _orientationChangeEmitter.addListener(\n    getEventName(),\n    async (update: OrientationChangeEvent) => {\n      let orientationInfo, orientationLock;\n      if (Platform.OS === 'ios' || Platform.OS === 'web') {\n        // For iOS, RN relies on statusBarOrientation (deprecated) to emit `didUpdateDimensions`\n        // event, so we emit our own `expoDidUpdateDimensions` event instead\n        orientationLock = update.orientationLock;\n        orientationInfo = update.orientationInfo;\n      } else {\n        // We rely on the RN Dimensions to emit the `didUpdateDimensions` event on Android\n        let orientation;\n        [orientationLock, orientation] = await Promise.all([\n          getOrientationLockAsync(),\n          getOrientationAsync(),\n        ]);\n        orientationInfo = { orientation };\n      }\n      listener({ orientationInfo, orientationLock });\n    }\n  );\n  _orientationChangeSubscribers.push(subscription);\n  return subscription;\n}\n\n// We need to keep track of our own subscribers because EventEmitter uses a shared subscriber\n// from NativeEventEmitter that is registered to the same eventTypes as us. Directly calling\n// removeAllListeners(eventName) will remove other module's subscribers.\n// @needsAudit\n/**\n * Removes all listeners subscribed to orientation change updates.\n */\nexport function removeOrientationChangeListeners(): void {\n  // Remove listener by subscription instead of eventType to avoid clobbering Dimension module's subscription of didUpdateDimensions\n  let i = _orientationChangeSubscribers.length;\n  while (i--) {\n    const subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n\n    // remove after a successful unsubscribe\n    _orientationChangeSubscribers.pop();\n  }\n}\n\n// @needsAudit\n/**\n * Unsubscribes the listener associated with the `Subscription` object from all orientation change\n * updates.\n * @param subscription A subscription object that manages the updates passed to a listener function\n * on an orientation change.\n */\nexport function removeOrientationChangeListener(subscription: Subscription): void {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(`Must pass in a valid subscription`);\n  }\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(\n    (sub) => sub !== subscription\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}