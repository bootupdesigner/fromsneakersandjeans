{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport ExponentSpeech from \"./ExponentSpeech\";\nimport { VoiceQuality } from \"./Speech.types\";\nvar SpeechEventEmitter = ExponentSpeech && new NativeEventEmitter(ExponentSpeech);\nexport { VoiceQuality };\nvar _CALLBACKS = {};\nvar _nextCallbackId = 1;\nvar _didSetListeners = false;\nfunction _unregisterListenersIfNeeded() {\n  if (Object.keys(_CALLBACKS).length === 0) {\n    removeSpeakingListener('Exponent.speakingStarted');\n    removeSpeakingListener('Exponent.speakingDone');\n    removeSpeakingListener('Exponent.speakingStopped');\n    removeSpeakingListener('Exponent.speakingError');\n    _didSetListeners = false;\n  }\n}\nfunction _registerListenersIfNeeded() {\n  if (_didSetListeners) return;\n  _didSetListeners = true;\n  setSpeakingListener('Exponent.speakingStarted', function (_ref) {\n    var id = _ref.id;\n    var options = _CALLBACKS[id];\n    if (options && options.onStart) {\n      options.onStart();\n    }\n  });\n  setSpeakingListener('Exponent.speakingDone', function (_ref2) {\n    var id = _ref2.id;\n    var options = _CALLBACKS[id];\n    if (options && options.onDone) {\n      options.onDone();\n    }\n    delete _CALLBACKS[id];\n    _unregisterListenersIfNeeded();\n  });\n  setSpeakingListener('Exponent.speakingStopped', function (_ref3) {\n    var id = _ref3.id;\n    var options = _CALLBACKS[id];\n    if (options && options.onStopped) {\n      options.onStopped();\n    }\n    delete _CALLBACKS[id];\n    _unregisterListenersIfNeeded();\n  });\n  setSpeakingListener('Exponent.speakingError', function (_ref4) {\n    var id = _ref4.id,\n      error = _ref4.error;\n    var options = _CALLBACKS[id];\n    if (options && options.onError) {\n      options.onError(new Error(error));\n    }\n    delete _CALLBACKS[id];\n    _unregisterListenersIfNeeded();\n  });\n}\nexport function speak(text) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var id = _nextCallbackId++;\n  _CALLBACKS[id] = options;\n  _registerListenersIfNeeded();\n  ExponentSpeech.speak(String(id), text, options);\n}\nexport function getAvailableVoicesAsync() {\n  return _getAvailableVoicesAsync.apply(this, arguments);\n}\nfunction _getAvailableVoicesAsync() {\n  _getAvailableVoicesAsync = _asyncToGenerator(function* () {\n    if (!ExponentSpeech.getVoices) {\n      throw new UnavailabilityError('Speech', 'getVoices');\n    }\n    return ExponentSpeech.getVoices();\n  });\n  return _getAvailableVoicesAsync.apply(this, arguments);\n}\nexport function isSpeakingAsync() {\n  return _isSpeakingAsync.apply(this, arguments);\n}\nfunction _isSpeakingAsync() {\n  _isSpeakingAsync = _asyncToGenerator(function* () {\n    return ExponentSpeech.isSpeaking();\n  });\n  return _isSpeakingAsync.apply(this, arguments);\n}\nexport function stop() {\n  return _stop.apply(this, arguments);\n}\nfunction _stop() {\n  _stop = _asyncToGenerator(function* () {\n    return ExponentSpeech.stop();\n  });\n  return _stop.apply(this, arguments);\n}\nexport function pause() {\n  return _pause.apply(this, arguments);\n}\nfunction _pause() {\n  _pause = _asyncToGenerator(function* () {\n    if (!ExponentSpeech.pause) {\n      throw new UnavailabilityError('Speech', 'pause');\n    }\n    return ExponentSpeech.pause();\n  });\n  return _pause.apply(this, arguments);\n}\nexport function resume() {\n  return _resume.apply(this, arguments);\n}\nfunction _resume() {\n  _resume = _asyncToGenerator(function* () {\n    if (!ExponentSpeech.resume) {\n      throw new UnavailabilityError('Speech', 'resume');\n    }\n    return ExponentSpeech.resume();\n  });\n  return _resume.apply(this, arguments);\n}\nfunction setSpeakingListener(eventName, callback) {\n  var listenerCount = SpeechEventEmitter.listenerCount ? SpeechEventEmitter.listenerCount(eventName) : SpeechEventEmitter.listeners(eventName).length;\n  if (listenerCount > 0) {\n    SpeechEventEmitter.removeAllListeners(eventName);\n  }\n  SpeechEventEmitter.addListener(eventName, callback);\n}\nfunction removeSpeakingListener(eventName) {\n  SpeechEventEmitter.removeAllListeners(eventName);\n}\nexport var maxSpeechInputLength = ExponentSpeech.maxSpeechInputLength || Number.MAX_VALUE;","map":{"version":3,"sources":["../src/Speech/Speech.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport { NativeEventEmitter } from 'react-native';\n\nimport ExponentSpeech from './ExponentSpeech';\nimport { SpeechOptions, SpeechEventCallback, VoiceQuality, Voice, WebVoice } from './Speech.types';\n\nconst SpeechEventEmitter = ExponentSpeech && new NativeEventEmitter(ExponentSpeech);\n\nexport { SpeechOptions, SpeechEventCallback, VoiceQuality, Voice, WebVoice };\n\nconst _CALLBACKS = {};\nlet _nextCallbackId = 1;\nlet _didSetListeners = false;\n\nfunction _unregisterListenersIfNeeded() {\n  if (Object.keys(_CALLBACKS).length === 0) {\n    removeSpeakingListener('Exponent.speakingStarted');\n    removeSpeakingListener('Exponent.speakingDone');\n    removeSpeakingListener('Exponent.speakingStopped');\n    removeSpeakingListener('Exponent.speakingError');\n    _didSetListeners = false;\n  }\n}\n\nfunction _registerListenersIfNeeded() {\n  if (_didSetListeners) return;\n  _didSetListeners = true;\n  setSpeakingListener('Exponent.speakingStarted', ({ id }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onStart) {\n      options.onStart();\n    }\n  });\n  setSpeakingListener('Exponent.speakingDone', ({ id }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onDone) {\n      options.onDone();\n    }\n    delete _CALLBACKS[id];\n    _unregisterListenersIfNeeded();\n  });\n  setSpeakingListener('Exponent.speakingStopped', ({ id }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onStopped) {\n      options.onStopped();\n    }\n    delete _CALLBACKS[id];\n    _unregisterListenersIfNeeded();\n  });\n  setSpeakingListener('Exponent.speakingError', ({ id, error }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onError) {\n      options.onError(new Error(error));\n    }\n    delete _CALLBACKS[id];\n    _unregisterListenersIfNeeded();\n  });\n}\n\n// @needsAudit\n/**\n * Speak out loud the text given options. Calling this when another text is being spoken adds\n * an utterance to queue.\n * @param text The text to be spoken. Cannot be longer than [`Speech.maxSpeechInputLength`](#speechmaxspeechinputlength).\n * @param options A `SpeechOptions` object.\n */\nexport function speak(text: string, options: SpeechOptions = {}) {\n  const id = _nextCallbackId++;\n  _CALLBACKS[id] = options;\n  _registerListenersIfNeeded();\n  ExponentSpeech.speak(String(id), text, options);\n}\n\n// @needsAudit\n/**\n * Returns list of all available voices.\n * @return List of `Voice` objects.\n */\nexport async function getAvailableVoicesAsync(): Promise<Voice[]> {\n  if (!ExponentSpeech.getVoices) {\n    throw new UnavailabilityError('Speech', 'getVoices');\n  }\n  return ExponentSpeech.getVoices();\n}\n\n//@needsAudit\n/**\n * Determine whether the Text-to-speech utility is currently speaking. Will return `true` if speaker\n * is paused.\n * @return Returns a Promise that fulfils with a boolean, `true` if speaking, `false` if not.\n */\nexport async function isSpeakingAsync(): Promise<boolean> {\n  return ExponentSpeech.isSpeaking();\n}\n\n// @needsAudit\n/**\n * Interrupts current speech and deletes all in queue.\n */\nexport async function stop(): Promise<void> {\n  return ExponentSpeech.stop();\n}\n\n// @needsAudit\n/**\n * Pauses current speech. This method is not available on Android.\n */\nexport async function pause(): Promise<void> {\n  if (!ExponentSpeech.pause) {\n    throw new UnavailabilityError('Speech', 'pause');\n  }\n  return ExponentSpeech.pause();\n}\n\n// @needsAudit\n/**\n * Resumes speaking previously paused speech or does nothing if there's none. This method is not\n * available on Android.\n */\nexport async function resume(): Promise<void> {\n  if (!ExponentSpeech.resume) {\n    throw new UnavailabilityError('Speech', 'resume');\n  }\n\n  return ExponentSpeech.resume();\n}\n\nfunction setSpeakingListener(eventName, callback) {\n  // @ts-ignore: the EventEmitter interface has been changed in react-native@0.64.0\n  const listenerCount = SpeechEventEmitter.listenerCount\n    ? // @ts-ignore: this is available since 0.64\n      SpeechEventEmitter.listenerCount(eventName)\n    : // @ts-ignore: this is available in older versions\n      SpeechEventEmitter.listeners(eventName).length;\n  if (listenerCount > 0) {\n    SpeechEventEmitter.removeAllListeners(eventName);\n  }\n  SpeechEventEmitter.addListener(eventName, callback);\n}\n\nfunction removeSpeakingListener(eventName) {\n  SpeechEventEmitter.removeAllListeners(eventName);\n}\n\n// @needsAudit\n/**\n * Maximum possible text length acceptable by `Speech.speak()` method. It is platform-dependent.\n * On iOS, this returns `Number.MAX_VALUE`.\n */\nexport const maxSpeechInputLength: number = ExponentSpeech.maxSpeechInputLength || Number.MAX_VALUE;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}