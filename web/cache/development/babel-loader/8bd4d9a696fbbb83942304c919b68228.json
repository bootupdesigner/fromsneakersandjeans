{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { SyntheticPlatformEmitter, CodedError } from 'expo-modules-core';\nimport { VoiceQuality } from \"./Speech.types\";\nvar MAX_SPEECH_INPUT_LENGTH = 32767;\nfunction _getVoices2() {\n  return _getVoices.apply(this, arguments);\n}\nfunction _getVoices() {\n  _getVoices = _asyncToGenerator(function* () {\n    return new Promise(function (resolve) {\n      var voices = window.speechSynthesis.getVoices();\n      if (voices.length > 0) {\n        resolve(voices);\n        return;\n      }\n      window.speechSynthesis.onvoiceschanged = function () {\n        var voices = window.speechSynthesis.getVoices();\n        resolve(voices);\n      };\n    });\n  });\n  return _getVoices.apply(this, arguments);\n}\nexport default {\n  get name() {\n    return 'ExponentSpeech';\n  },\n  speak: function () {\n    var _speak = _asyncToGenerator(function* (id, text, options) {\n      if (text.length > MAX_SPEECH_INPUT_LENGTH) {\n        throw new CodedError('ERR_SPEECH_INPUT_LENGTH', 'Speech input text is too long! Limit of input length is: ' + MAX_SPEECH_INPUT_LENGTH);\n      }\n      var message = new SpeechSynthesisUtterance();\n      if (typeof options.rate === 'number') {\n        message.rate = options.rate;\n      }\n      if (typeof options.pitch === 'number') {\n        message.pitch = options.pitch;\n      }\n      if (typeof options.language === 'string') {\n        message.lang = options.language;\n      }\n      if (typeof options.volume === 'number') {\n        message.volume = options.volume;\n      }\n      if ('_voiceIndex' in options && options._voiceIndex != null) {\n        var voices = yield _getVoices2();\n        message.voice = voices[Math.min(voices.length - 1, Math.max(0, options._voiceIndex))];\n      }\n      if (typeof options.voice === 'string') {\n        var _voices = yield _getVoices2();\n        message.voice = _voices[Math.max(0, _voices.findIndex(function (voice) {\n          return voice.voiceURI === options.voice;\n        }))];\n      }\n      if (typeof options.onResume === 'function') {\n        message.onresume = options.onResume;\n      }\n      if (typeof options.onMark === 'function') {\n        message.onmark = options.onMark;\n      }\n      if (typeof options.onBoundary === 'function') {\n        message.onboundary = options.onBoundary;\n      }\n      message.onstart = function (nativeEvent) {\n        SyntheticPlatformEmitter.emit('Exponent.speakingStarted', {\n          id: id,\n          nativeEvent: nativeEvent\n        });\n      };\n      message.onend = function (nativeEvent) {\n        SyntheticPlatformEmitter.emit('Exponent.speakingDone', {\n          id: id,\n          nativeEvent: nativeEvent\n        });\n      };\n      message.onpause = function (nativeEvent) {\n        SyntheticPlatformEmitter.emit('Exponent.speakingStopped', {\n          id: id,\n          nativeEvent: nativeEvent\n        });\n      };\n      message.onerror = function (nativeEvent) {\n        SyntheticPlatformEmitter.emit('Exponent.speakingError', {\n          id: id,\n          nativeEvent: nativeEvent\n        });\n      };\n      message.text = text;\n      window.speechSynthesis.speak(message);\n      return message;\n    });\n    function speak(_x, _x2, _x3) {\n      return _speak.apply(this, arguments);\n    }\n    return speak;\n  }(),\n  getVoices: function () {\n    var _getVoices3 = _asyncToGenerator(function* () {\n      var voices = yield _getVoices2();\n      return voices.map(function (voice) {\n        return {\n          identifier: voice.voiceURI,\n          quality: VoiceQuality.Default,\n          isDefault: voice.default,\n          language: voice.lang,\n          localService: voice.localService,\n          name: voice.name,\n          voiceURI: voice.voiceURI\n        };\n      });\n    });\n    function getVoices() {\n      return _getVoices3.apply(this, arguments);\n    }\n    return getVoices;\n  }(),\n  isSpeaking: function () {\n    var _isSpeaking = _asyncToGenerator(function* () {\n      return window.speechSynthesis.speaking;\n    });\n    function isSpeaking() {\n      return _isSpeaking.apply(this, arguments);\n    }\n    return isSpeaking;\n  }(),\n  stop: function () {\n    var _stop = _asyncToGenerator(function* () {\n      return window.speechSynthesis.cancel();\n    });\n    function stop() {\n      return _stop.apply(this, arguments);\n    }\n    return stop;\n  }(),\n  pause: function () {\n    var _pause = _asyncToGenerator(function* () {\n      return window.speechSynthesis.pause();\n    });\n    function pause() {\n      return _pause.apply(this, arguments);\n    }\n    return pause;\n  }(),\n  resume: function () {\n    var _resume = _asyncToGenerator(function* () {\n      return window.speechSynthesis.resume();\n    });\n    function resume() {\n      return _resume.apply(this, arguments);\n    }\n    return resume;\n  }(),\n  maxSpeechInputLength: MAX_SPEECH_INPUT_LENGTH\n};","map":{"version":3,"sources":["../src/Speech/ExponentSpeech.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { SyntheticPlatformEmitter, CodedError } from 'expo-modules-core';\n\nimport { SpeechOptions, WebVoice, VoiceQuality } from './Speech.types';\n\n//https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/text\nconst MAX_SPEECH_INPUT_LENGTH = 32767;\n\nasync function getVoices(): Promise<SpeechSynthesisVoice[]> {\n  return new Promise<SpeechSynthesisVoice[]>((resolve) => {\n    const voices = window.speechSynthesis.getVoices();\n\n    if (voices.length > 0) {\n      resolve(voices);\n      return;\n    }\n\n    // when a page loads it takes some amount of time to populate the voices list\n    // see https://stackoverflow.com/a/52005323/4337317\n    window.speechSynthesis.onvoiceschanged = function () {\n      const voices = window.speechSynthesis.getVoices();\n      resolve(voices);\n    };\n  });\n}\n\nexport default {\n  get name(): string {\n    return 'ExponentSpeech';\n  },\n  async speak(id: string, text: string, options: SpeechOptions): Promise<SpeechSynthesisUtterance> {\n    if (text.length > MAX_SPEECH_INPUT_LENGTH) {\n      throw new CodedError(\n        'ERR_SPEECH_INPUT_LENGTH',\n        'Speech input text is too long! Limit of input length is: ' + MAX_SPEECH_INPUT_LENGTH\n      );\n    }\n\n    const message = new SpeechSynthesisUtterance();\n\n    if (typeof options.rate === 'number') {\n      message.rate = options.rate;\n    }\n    if (typeof options.pitch === 'number') {\n      message.pitch = options.pitch;\n    }\n    if (typeof options.language === 'string') {\n      message.lang = options.language;\n    }\n    if (typeof options.volume === 'number') {\n      message.volume = options.volume;\n    }\n    if ('_voiceIndex' in options && options._voiceIndex != null) {\n      const voices = await getVoices();\n      message.voice = voices[Math.min(voices.length - 1, Math.max(0, options._voiceIndex))];\n    }\n    if (typeof options.voice === 'string') {\n      const voices = await getVoices();\n      message.voice =\n        voices[\n          Math.max(\n            0,\n            voices.findIndex((voice) => voice.voiceURI === options.voice)\n          )\n        ];\n    }\n    if (typeof options.onResume === 'function') {\n      message.onresume = options.onResume;\n    }\n    if (typeof options.onMark === 'function') {\n      message.onmark = options.onMark;\n    }\n    if (typeof options.onBoundary === 'function') {\n      message.onboundary = options.onBoundary;\n    }\n\n    message.onstart = (nativeEvent: SpeechSynthesisEvent) => {\n      SyntheticPlatformEmitter.emit('Exponent.speakingStarted', { id, nativeEvent });\n    };\n    message.onend = (nativeEvent: SpeechSynthesisEvent) => {\n      SyntheticPlatformEmitter.emit('Exponent.speakingDone', { id, nativeEvent });\n    };\n    message.onpause = (nativeEvent: SpeechSynthesisEvent) => {\n      SyntheticPlatformEmitter.emit('Exponent.speakingStopped', { id, nativeEvent });\n    };\n    message.onerror = (nativeEvent: SpeechSynthesisErrorEvent) => {\n      SyntheticPlatformEmitter.emit('Exponent.speakingError', { id, nativeEvent });\n    };\n\n    message.text = text;\n\n    window.speechSynthesis.speak(message);\n\n    return message;\n  },\n  async getVoices(): Promise<WebVoice[]> {\n    const voices = await getVoices();\n    return voices.map((voice) => ({\n      identifier: voice.voiceURI,\n      quality: VoiceQuality.Default,\n      isDefault: voice.default,\n      language: voice.lang,\n      localService: voice.localService,\n      name: voice.name,\n      voiceURI: voice.voiceURI,\n    }));\n  },\n  async isSpeaking(): Promise<boolean> {\n    return window.speechSynthesis.speaking;\n  },\n  async stop(): Promise<void> {\n    return window.speechSynthesis.cancel();\n  },\n  async pause(): Promise<void> {\n    return window.speechSynthesis.pause();\n  },\n  async resume(): Promise<void> {\n    return window.speechSynthesis.resume();\n  },\n  maxSpeechInputLength: MAX_SPEECH_INPUT_LENGTH,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}